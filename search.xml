<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP基础入门（三）</title>
      <link href="/2025/07/16/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2025/07/16/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP基础入门（三）"><a href="#PHP基础入门（三）" class="headerlink" title="PHP基础入门（三）"></a>PHP基础入门（三）</h1><blockquote><p>[!NOTE]</p><p>本篇文章仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-文件路径处理"><a href="#1-文件路径处理" class="headerlink" title="1. 文件路径处理"></a>1. 文件路径处理</h2><ol><li><p><code>basename($path, $suffix)</code></p><ul><li><p>返回路径中的文件名部分，参数<code>$path</code>为路径，可以通过参数<code>$suffix</code>来去掉文件的扩展名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$oneName</span> = <span class="title function_ invoke__">basename</span>(<span class="string">&quot;/testweb/home.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$oneName</span>; <span class="comment">//输出为 home.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$twoName</span> = <span class="title function_ invoke__">basename</span>(<span class="string">&quot;/testweb/home.php&quot;</span>, <span class="string">&quot;.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twoName</span>; <span class="comment">//输出为 home</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>dirname($path, $levels)</code></p><ul><li><p>返回路径目录部分，参数<code>$path</code>为路径，可以通过参数<code>$levels</code>指定向上返回的目录层级数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$oneName</span> = <span class="title function_ invoke__">dirname</span>(<span class="string">&quot;c:/testweb/home.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$oneName</span>; <span class="comment">//输出为 c:/testweb</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$twoName</span> = <span class="title function_ invoke__">dirname</span>(<span class="string">&quot;c:/testweb/home.php&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twoName</span>; <span class="comment">//输出为 c:\</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>pathinfo($path)</code></p><ul><li><p>返回路径信息数组，包括返回路径（dirname），文件名（basename），后缀名（extension）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="string">&quot;/testweb/test.txt&quot;</span>)) </span><br><span class="line"><span class="comment">// 输出为Array ( [dirname] =&gt; testweb [basename] =&gt; test.txt [extension] =&gt; txt [filename] =&gt; test )</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>因为这里要输出信息数组，所以要使用<code>print_r</code>输出。</p></li></ul></li></ol><h2 id="2-文件属性修改"><a href="#2-文件属性修改" class="headerlink" title="2. 文件属性修改"></a>2. 文件属性修改</h2><ol><li><p><code>chgrp($file, $group)</code></p><ul><li><p>修改文件所属组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">chgrp</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;www-data&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>chmod($file, $owner)</code></p><ul><li><p>修改文件权限（8进制模式）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">chmod</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="number">0664</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里的权限表示为所有者读写，其他人只读。</p></li></ul></li><li><p><code>chown($file, $owner)</code></p><ul><li><p>修改文件所有者。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">chown</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;gsy&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>touch($file, $time)</code></p><ul><li><p>修改访问&#x2F;修改时间（默认为当前时间）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">touch</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>文件存在则更新时间，文件不存在则创建。</p></li></ul></li></ol><h2 id="3-文件读写操作"><a href="#3-文件读写操作" class="headerlink" title="3.文件读写操作"></a>3.文件读写操作</h2><ol><li><p><code>fopen($file, $mode)</code></p><ul><li><p>打开文件，参数<code>$mode</code>则是以什么样的模式打开文件。</p><table><thead><tr><th align="center"><strong>模式</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><code>r</code></td><td align="center">只读方式打开，将文件指针指向文件头。</td></tr><tr><td align="center"><code>r+</code></td><td align="center">读写方式打开，将文件指针指向文件头。</td></tr><tr><td align="center"><code>w</code></td><td align="center">写入方式打开，将文件指针指向文件头并将文件大小截为0，如果文件不存在则尝试创建。</td></tr><tr><td align="center"><code>w+</code></td><td align="center">读写方式打开，将文件指针指向文件头并将文件大小截为0，如果文件不存在则尝试创建。</td></tr><tr><td align="center"><code>a</code></td><td align="center">写入方式打开，将文件指针指向文件尾，如果文件不存在则尝试创建。</td></tr><tr><td align="center"><code>a+</code></td><td align="center">读写方式打开，将文件指针指向文件尾，如果文件不存在则尝试创建。</td></tr><tr><td align="center"><code>x</code></td><td align="center">创建并以写入方式打开，将文件指针指向文件头。如果文件已经存在，则<code>fopen()</code>调用失败并返回<code>FALSE</code>，并生成一条 E_WARNING 级别的报错信息。如果文件不存在则尝试创建。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fopen</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">// 以只读模式打开文件</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$fopen</span>);<span class="comment">// 使用var_dump()操作一下$fopen看看效果，查看输出结果，提示resource</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>fopen()</code>函数返回的仅仅一个指向文件的资源句柄，而非内容本身。</p></li></ul></li><li><p><code>fwrite($handle, $data)</code> 和 <code>fread($handle, $length)</code></p><ul><li><p><code>fwrite($handle, $data)</code>函数用于写入数据。<code>$handle</code>参数代表文件对象，而<code>$data</code>参数代表的是需要写入的数据，它的返回值是输入值字节数，并且如果需要写入的文档中已经有内容了，<code>fwrite()</code>函数会覆盖这些内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fopen</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&quot;w&quot;</span>); <span class="comment">// 以写入的方式打开文件。</span></span><br><span class="line"><span class="variable">$fwrite</span> = <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fopen</span>, <span class="string">&quot;fwrite()函数使用测试&quot;</span>); <span class="comment">// 调用函数fwrite()并将它赋值给变量 $fwrite。</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fopen</span>); <span class="comment">// 关闭文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="variable">$fwrite</span>; <span class="comment">// 打印$fwrite变量 输出为26</span></span><br></pre></td></tr></table></figure></li><li><p><code>fread($handle, $length)</code>返回所读取的字符串，如果出错返回 <code>FALSE</code>。<code>$handle</code>参数代表的是需要读取的文件对象，<code>$length</code>参数代表的是需要读取的字节长度。</p></li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">// 用读的方式打开文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$handle</span>, <span class="number">100</span>); <span class="comment">// 用$str变量接受fread函数返回的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="variable">$str</span>; <span class="comment">// 打印字符串</span></span><br></pre></td></tr></table></figure></li><li><p><code>file_get_contents($file)</code> 和 <code>file_put_contents($file, $data)</code></p><ul><li><p><code>file_get_contents($file)</code>可以读取整个文件到字符串，它返回的值是字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>); <span class="comment">// 输出文件中内容</span></span><br></pre></td></tr></table></figure></li><li><p><code>file_put_contents($file, $data)</code>可以写入字符串到文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的test.txt文件中的内容为123</span></span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>; <span class="comment">// 输出的内容为5</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>file_put_contents($file, $data)</code>函数执行两个操作：</p><ol><li>覆盖写入文件，原本的txt文件中的内容<code>&#39;123&#39;</code>被替换为<code>hello</code>。</li><li>返回写入的字节数。</li></ol></li></ul></li><li><p><code>file($file)</code></p><ul><li><p><code>file($file)</code>函数可以读取整个函数到数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*原本txt文档中的内容为：</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">def</span></span><br><span class="line"><span class="comment">ghi</span></span><br><span class="line"><span class="comment">jkl</span></span><br><span class="line"><span class="comment">mno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>)); </span><br><span class="line"><span class="comment">// 输出的结果为：Array ( [0] =&gt; abc [1] =&gt; def [2] =&gt; ghi [3] =&gt; jkl [4] =&gt; mno )</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>fgets($handle)</code> 和 <code>fgetc($handle)</code></p><ul><li><p><code>fgets($handle)</code> 用来逐行读取文件内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先用 fopen() 打开文件</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$line</span>; <span class="comment">// 输出第一行内容</span></span><br></pre></td></tr></table></figure></li><li><p><code>fgetc($handle)</code>用来逐字读取文件内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先用 fopen() 打开文件</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$line</span>; <span class="comment">// 输出第一个单字符</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><p>在文件读写操作所提到的这些函数中，有一个需要注意的地方是像：<code>fwrite($handle, $data)</code> 、<code>fread($handle, $length)</code>、 <code>fread($handle, $length)</code>、<code>fgets($handle)</code>、<code>fgetc($handle)</code>这样的函数，它们的参数使用的是文件资源（资源句柄<code>$handle</code>），所以在调用时，我们首先应该通过<code>fopen()</code>函数获得这样的资源句柄，才能保证顺利运行。</p></li></ol><h2 id="4-文件缓存状态"><a href="#4-文件缓存状态" class="headerlink" title="4. 文件缓存状态"></a>4. 文件缓存状态</h2><ol><li><p><code>clearstatcache()</code></p><ul><li><p>清除文件缓存状态（修改后需要调用）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设原来txt文件里的内容为123</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;初始大小：&quot;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>) . <span class="string">&quot;字节&lt;br&gt;&quot;</span>; <span class="comment">// 初始大小输出为3。</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="string">&quot;添加一些内容&quot;</span>); <span class="comment">// 通过函数修改txt文件中的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;不清理缓存：&quot;</span> . <span class="title function_ invoke__">filesize</span>(file) . <span class="string">&quot;字节&lt;br&gt;&quot;</span>; <span class="comment">// 没有调用clearstatcahe()函数时 继续输出3</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">clearstatcache</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;清理缓存后&quot;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>) . <span class="string">&quot;字节&lt;br&gt;&quot;</span> <span class="comment">// 清理缓存后输出的值为18</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>filesize($file)</code> 和 <code>filetype($file)</code></p><ul><li><p><code>filesize($file)</code>函数用来获取文件大小，并返回一个以字节为单位的大小数值，在刚刚的例子里也有体现。</p></li><li><p><code>filetype($file)</code>函数可以获取并返回文件类型，但是它返回的是文件在操作系统中的基本类型（也称为文件模式、文件种类），而不是后最格式或文件格式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;G:/phpCode/test.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">filetype</span>(<span class="variable">$file</span>); <span class="comment">// 输出的结果为file</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>file_exists($file)</code>、<code>is_file($file)</code>和<code>is_dir($file)</code></p><ul><li><p><code>file_exists($file)</code>函数用来查找检查文件或者目录是否存在。若存在则返回<code>TRUE</code>，若不存在则返回<code>FALSE</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;G:\phpCode\test.txt&#x27;</span>; <span class="comment">// 此文件存在</span></span><br><span class="line"><span class="variable">$iiii</span> = <span class="string">&#x27;G:\phpCode\abc.txt&#x27;</span>; <span class="comment">// 此文件不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件存在&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出为文件存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$iiii</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件存在&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出为文件不存在</span></span><br></pre></td></tr></table></figure></li><li><p><code>is_file($file)</code>函数用来检查是否为文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_file</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>is_dir($file)</code>函数用用户来稽查是否为目录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_dir</span>(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础入门（二）</title>
      <link href="/2025/07/15/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/07/15/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP基础入门（二）"><a href="#PHP基础入门（二）" class="headerlink" title="PHP基础入门（二）"></a>PHP基础入门（二）</h1><blockquote><p>[!NOTE]</p><p>本篇文章仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-流程控制语句"><a href="#1-流程控制语句" class="headerlink" title="1. 流程控制语句"></a>1. 流程控制语句</h2><p>​流程控制语句用来控制程序的执行流程，分为三种流程结构：</p><p>顺序结构、选择结构和循环结构。</p><h3 id="1-1-顺序结构"><a href="#1-1-顺序结构" class="headerlink" title="1.1 顺序结构"></a>1.1 顺序结构</h3><p>​当没有任何有关流程控制的语句时，程序默认的执行顺序，从上而下，一行一行执行。</p><h3 id="1-2-选择结构"><a href="#1-2-选择结构" class="headerlink" title="1.2 选择结构"></a>1.2 选择结构</h3><p>​程序在自上而下依次执行时，可以通过条件判断，选择性的执行某一段代码。若条件P为真，则执行A，否则执行B 。</p><h4 id="1-2-1-if语句"><a href="#1-2-1-if语句" class="headerlink" title="1.2.1 if语句"></a>1.2.1 <code>if</code>语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition1)&#123;</span><br><span class="line"> <span class="comment">//code1</span></span><br><span class="line">&#125;<span class="keyword">elseif</span>(condition2)&#123;</span><br><span class="line"> <span class="comment">//code2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">//code3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>解释：</strong>上面的代码若<code>condition1</code>条件为真，则执行<code>code1</code>部分的代码；若<code>condition1</code>不为真但<code>condition2</code>为真，则执行<code>code2</code>部分的代码，若两者都不为真，则执行<code>code3</code>部分的代码。</li></ul><h3 id="1-2-2-switch语句"><a href="#1-2-2-switch语句" class="headerlink" title="1.2.2 switch语句"></a>1.2.2 <code>switch</code>语句</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$var</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> value1:</span><br><span class="line"> <span class="comment">//code</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> value2:</span><br><span class="line"> <span class="comment">//code</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"> <span class="comment">//code</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>解释：</strong><ul><li><code>$var</code> 是要判断的变量或表达式，程序会将其值与后续的 <code>case</code> 值进行比较；</li><li><code>case value1:</code> 表示一个匹配项：当 <code>$var == value1</code>（松散比较）时，可以有任何数量个 <code>case</code> 分支，支持不同类型：数字、字符串、常量等。</li><li><code>// code</code>对应匹配成功后执行的代码块，可以包含任意有效的 PHP 代码。</li><li><code>break;</code><strong>关键中断指令</strong>：执行完当前 case 后跳出整个 switch 结构，如果省略，程序会继续执行下一个 case 的代码（称为”case 穿透”）。</li><li><code>default:</code>当 <code>$var</code> 不匹配任何 case 时执行的默认分支，可以省略，但建议始终包含以处理意外情况，通常放在最后（非强制要求）。</li></ul></li></ul><h3 id="1-3-循环语句"><a href="#1-3-循环语句" class="headerlink" title="1.3 循环语句"></a>1.3 循环语句</h3><p>​循环语句功能：在循环条件满足的情况下，反复执行特定代码。</p><h4 id="1-3-1-while-循环"><a href="#1-3-1-while-循环" class="headerlink" title="1.3.1 while 循环"></a>1.3.1 <code>while </code>循环</h4><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 重复执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>先判断条件后执行</li><li>条件为真时执行代码块</li><li>条件为假时跳过整个循环</li></ul><p><strong>工作流程</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">↓</span><br><span class="line">检查条件 → false → 结束</span><br><span class="line">↓ true</span><br><span class="line">执行代码块</span><br><span class="line">↓</span><br><span class="line">返回检查条件</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$counter</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$counter</span> &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;当前计数: <span class="subst">$counter</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$counter</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">当前计数: 1</span></span><br><span class="line"><span class="comment">当前计数: 2</span></span><br><span class="line"><span class="comment">当前计数: 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-do-while循环"><a href="#1-3-2-do-while循环" class="headerlink" title="1.3.2 do-while循环"></a>1.3.2 <code>do-while</code>循环</h4><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 重复执行的代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><strong>先执行一次</strong>代码块，再检查条件</li><li>条件为真时继续执行</li><li>至少执行一次代码块</li><li>结尾的分号(<code>;</code>)不能省略</li></ul><p><strong>工作流程</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">↓</span><br><span class="line">执行代码块</span><br><span class="line">↓</span><br><span class="line">检查条件 → false → 结束</span><br><span class="line">↓ true</span><br><span class="line">返回执行代码块</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;值为: <span class="subst">$i</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="number">3</span>);</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">值为: 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-for循环"><a href="#1-3-3-for循环" class="headerlink" title="1.3.3 for循环"></a>1.3.3 <code>for</code>循环</h4><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init; condition; increment) &#123;</span><br><span class="line">    <span class="comment">// 重复执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组成部分</strong>：</p><ol><li>初始化表达式 (<code>init</code>)：循环开始时执行一次</li><li>循环条件 (<code>condition</code>)：每次迭代前检查</li><li>递增&#x2F;递减表达式 (<code>increment</code>)：每次迭代后执行</li></ol><p><strong>工作流程</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">↓</span><br><span class="line">执行init</span><br><span class="line">↓</span><br><span class="line">检查condition → false → 结束</span><br><span class="line">↓ true</span><br><span class="line">执行代码块</span><br><span class="line">↓</span><br><span class="line">执行increment</span><br><span class="line">↓</span><br><span class="line">返回检查condition</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;迭代次数: <span class="subst">$i</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">迭代次数: 0</span></span><br><span class="line"><span class="comment">迭代次数: 1</span></span><br><span class="line"><span class="comment">迭代次数: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>高级用法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多表达式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>, <span class="variable">$j</span>=<span class="number">5</span>; <span class="variable">$i</span>&lt;=<span class="number">5</span>; <span class="variable">$i</span>++, <span class="variable">$j</span>--) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i: <span class="subst">$i</span>, j: <span class="subst">$j</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限循环</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">// 需要break语句终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-foreach循环"><a href="#1-3-4-foreach循环" class="headerlink" title="1.3.4 foreach循环"></a>1.3.4 <code>foreach</code>循环</h4><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 $value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 $key 和 $value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>专门遍历数组和对象</li><li>自动迭代数组中的每个元素</li><li>不需要维护计数器</li></ul><p><strong>工作流程</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">↓</span><br><span class="line">获取第一个元素 → 无元素 → 结束</span><br><span class="line">↓</span><br><span class="line">执行代码块</span><br><span class="line">↓</span><br><span class="line">获取下一个元素</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$colors</span> <span class="keyword">as</span> <span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$color</span> &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：red green blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键和值</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$colors</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$index</span>: <span class="subst">$color</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">0: red</span></span><br><span class="line"><span class="comment">1: green</span></span><br><span class="line"><span class="comment">2: blue</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>高级特性</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用遍历（修改原数组）</span></span><br><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$numbers</span> <span class="keyword">as</span> &amp;<span class="variable">$num</span>) &#123;</span><br><span class="line">    <span class="variable">$num</span> *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$numbers</span>); <span class="comment">// 输出：[2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组遍历</span></span><br><span class="line"><span class="variable">$users</span> = [</span><br><span class="line">    [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span> =&gt; <span class="number">28</span>],</span><br><span class="line">    [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span> =&gt; <span class="number">32</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&quot; is &quot;</span> . <span class="variable">$user</span>[<span class="string">&#x27;age&#x27;</span>] . <span class="string">&quot; years old.&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">Alice is 28 years old.</span></span><br><span class="line"><span class="comment">Bob is 32 years old. */</span></span><br></pre></td></tr></table></figure><p><strong>适用场景</strong>：</p><ul><li>遍历数组元素</li><li>处理关联数组</li><li>操作多维数组</li></ul><h3 id="1-4-循环控制语句"><a href="#1-4-循环控制语句" class="headerlink" title="1.4 循环控制语句"></a>1.4 循环控制语句</h3><h4 id="1-4-1-break语句"><a href="#1-4-1-break语句" class="headerlink" title="1.4.1 break语句"></a>1.4.1 <code>break</code>语句</h4><ul><li><p>立即结束整个循环。</p></li><li><p><code>break n</code> 可以指定跳出多少层循环。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：01234</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-continue语句"><a href="#1-4-2-continue语句" class="headerlink" title="1.4.2 continue语句"></a>1.4.2 <code>continue</code>语句</h4><ul><li><p>跳过当前迭代，进入下一次循环。</p></li><li><p><code>continue n</code> 可以指定跳过多少层迭代。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳过本次迭代</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：0134</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-3-循环标签"><a href="#1-4-3-循环标签" class="headerlink" title="1.4.3 循环标签"></a>1.4.3 循环标签</h4><p>​顾名思义循环标签就是给某一个循环赋予<strong>可自定义</strong>的名字，一是为了让程序更加清晰，二是为了跳出循环时可以比<code>break n</code>更加灵活，直观的操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">outerLoop:    <span class="comment">// 给外层循环贴标签</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    </span><br><span class="line">    innerLoop: <span class="comment">// 给内层循环贴标签</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">3</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$i</span>-<span class="subst">$j</span> &quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可以根据条件指定跳出哪个循环</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$j</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outerLoop; <span class="comment">// 直接跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行后会输出: </span></span><br><span class="line"><span class="comment">// 0-0 0-1 0-2 </span></span><br><span class="line"><span class="comment">// 1-0 1-1 </span></span><br></pre></td></tr></table></figure><p><strong>循环标签 vs <code>break n</code></strong></p><table><thead><tr><th align="center">特性</th><th align="center">循环标签</th><th align="center"><code>break n</code></th></tr></thead><tbody><tr><td align="center">可读性</td><td align="center">更好（名称有意义）</td><td align="center">需数层级</td></tr><tr><td align="center">灵活性</td><td align="center">可在不同作用域使用</td><td align="center">只限连续嵌套</td></tr><tr><td align="center">可靠性</td><td align="center">修改结构不影响</td><td align="center">层级改变需调整n值</td></tr><tr><td align="center">使用场景</td><td align="center">复杂多层且需精确控制</td><td align="center">简单嵌套跳多层</td></tr></tbody></table><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h2><h3 id="2-1-函数定义"><a href="#2-1-函数定义" class="headerlink" title="2.1 函数定义"></a>2.1 函数定义</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span> = <span class="string">&quot;默认值&quot;</span></span>): 返回值类型 </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑代码</span></span><br><span class="line">    <span class="keyword">return</span> $返回值; <span class="comment">// 可直接 return &quot;结果&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键特性</strong>：</p><ul><li><p><strong>默认参数</strong>：可选参数必须放在必选参数之后<code>function calc($a, $b=10) &#123;...&#125;</code>。</p></li><li><p><strong>类型声明（PHP7+增强）</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">float</span> <span class="variable">$b</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strval</span>(<span class="variable">$a</span> + <span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>无返回值时</strong>：可省略 <code>return</code> 或使用 <code>return null</code>。</p></li></ul><h3 id="2-2-函数调用"><a href="#2-2-函数调用" class="headerlink" title="2.2 函数调用"></a>2.2 函数调用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span></span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>传参方式</strong>：<ul><li>值传递（默认）：修改形参不影响实参</li><li>引用传递：<code>function foo(&amp;$var) &#123;...&#125;</code>（在函数定义时参数前加 <code>&amp;</code> (如 <code>function foo(&amp;$param)</code>)。这种方式传递的是实参变量<strong>本身的内存地址</strong>，而不是值的拷贝。函数内部修改 <code>$param</code> 会直接影响调用处原始的 <code>$arg</code> 变量。图片中展示的是更常用的<strong>值传递</strong>。）</li></ul></li><li><strong>返回值处理</strong>：</li></ul><p>​函数执行后返回给调用者的数据叫做返回值，可以用来传递数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1.没有参数，没有返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;没有参数，没有参会值的方法&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.有参数，没有返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;有参数，没有返回值的方法，参数是：<span class="subst">$name</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.有参数，有返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;返回值x&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;有参数，有返回值的方法,返回值是：<span class="subst">$re</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_ invoke__">fun1</span>();</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">fun2</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">fun3</span>(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-匿名函数"><a href="#2-3-匿名函数" class="headerlink" title="2.3 匿名函数"></a>2.3 匿名函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：创建匿名函数并赋值给变量</span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello <span class="subst">$name</span>&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：通过变量名调用匿名函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$greet</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 输出：Hello World</span></span><br></pre></td></tr></table></figure><ul><li><strong>匿名函数核心解析</strong><ul><li><strong>匿名</strong>：<ul><li>普通函数：<code>function sayHello() &#123;...&#125;。</code></li><li>匿名函数：<code>function(...)&#123;...&#125;</code> （没有函数名）。</li></ul></li><li><strong>赋值给变量才能使用</strong>：<ul><li><code>$greet = function(...)&#123;...&#125;;</code></li><li>通过 <code>$greet</code> 变量来“保存”这个函数。</li></ul></li><li><strong>调用方式 &#x3D; 变量名+括号</strong>：<ul><li><code>$greet(&quot;参数&quot;)</code> 👉 像普通函数一样调用。</li></ul></li><li><strong>参数传递</strong>：<ul><li><code>$name</code> 接收传入的值（本例中接收 <code>&quot;World&quot;</code>）。</li></ul></li><li><strong>函数返回值</strong>：<ul><li><code>return &quot;Hello $name&quot;</code> 返回拼接后的字符串。</li></ul></li></ul></li></ul><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><p>​数组指数据的组合，能够在单个变量中存储多个值。可以将数组看作一个存储数据的盒子，盒子中有很多个格子，每个格子中都可存储一个数据。</p><ul><li>数组名：盒子名</li><li>元素：格子中的数据</li><li>索引：格子的位置</li><li>长度：格子的数量</li></ul><h3 id="3-1-索引数组"><a href="#3-1-索引数组" class="headerlink" title="3.1 索引数组"></a>3.1 索引数组</h3><p>​通过索引读取数组中的元素 ：<code>$数组名[索引];</code>，索引从0开始。即数组中的第一个元素索引为0，以此类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过索引 读取数组中的所有元素  $数组名[索引];</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$cars</span>[0].<span class="subst">$cars</span>[1].<span class="subst">$cars</span>[2]&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-关联数组"><a href="#3-2-关联数组" class="headerlink" title="3.2 关联数组"></a>3.2 关联数组</h3><h4 id="3-2-1-核心概念："><a href="#3-2-1-核心概念：" class="headerlink" title="3.2.1 核心概念："></a>3.2.1 核心概念：</h4><ul><li><ol><li><strong>键值对：</strong>关联数组中的每个元素都由两个部分组成——键（key）和值（value）</li></ol></li><li><ol start="2"><li><strong>自定义键名：</strong>与索引数组使用从 0 开始的数字作为键（索引）不同，关联数组允许你使用字符串作为键名（也可以使用整数，但意义通常是自定义的）。这个键名是描述性的，代表了你要存储的值的含义。</li></ol></li><li><ol start="3"><li><strong>映射关系：</strong>你可以把关联数组想象成一个词典或一张映射表。通过一个唯一的、有意义的键，你可以快速查找、访问或修改与之关联的值。</li></ol></li></ul><h4 id="3-2-2-关联数组"><a href="#3-2-2-关联数组" class="headerlink" title="3.2.2 关联数组"></a>3.2.2 关联数组</h4><ul><li><p><strong>创建关联数组</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 array() 语法（较旧但仍然有效）</span></span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> =&gt; <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;major&quot;</span> =&gt; <span class="string">&quot;计算机科学&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用更简洁的 [] 语法（PHP 5.4+ 推荐）</span></span><br><span class="line"><span class="variable">$car</span> = [</span><br><span class="line">    <span class="string">&quot;make&quot;</span> =&gt; <span class="string">&quot;Toyota&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span> =&gt; <span class="string">&quot;Camry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;year&quot;</span> =&gt; <span class="number">2023</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p><strong>访问元素</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$student</span>[<span class="string">&quot;name&quot;</span>]; <span class="comment">// 输出：张三</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>[<span class="string">&quot;model&quot;</span>];    <span class="comment">// 输出：Camry</span></span><br></pre></td></tr></table></figure></li><li><p><strong>添加或修改元素</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$student</span>[<span class="string">&quot;grade&quot;</span>] = <span class="string">&quot;B+&quot;</span>; <span class="comment">// 添加新元素</span></span><br><span class="line"><span class="variable">$student</span>[<span class="string">&quot;age&quot;</span>] = <span class="number">21</span>;     <span class="comment">// 修改现有元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong></p><ol><li>键是唯一的，同一个数组中，不能有两个元素使用完全相同的键名。如果指定相同的键名，后面的值会覆盖前面的值。</li><li>键的类型可以是 整数 或 字符串，如果一个字符串键的内容恰好是一个有效的十进制整数（如 <code>&#39;123&#39;</code>），PHP 会自动将其转换为整数键（<code>123</code>）。</li><li>值的类型可以是PHP支持的任何类型。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础入门（一）</title>
      <link href="/2025/07/14/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/07/14/PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP基础入门（一）"><a href="#PHP基础入门（一）" class="headerlink" title="PHP基础入门（一）"></a>PHP基础入门（一）</h1><blockquote><p>[!NOTE]</p><p>本篇文章仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>​PHP（Hypertext Preprocessor）是一种广泛使用的开源服务器端脚本语言，尤其适用于Web开发。</p><ul><li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码。</li><li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器。</li><li>PHP 文件的默认文件扩展名是 <code>.php</code>。</li></ul><p>​通过 PHP，您不再限于输出 HTML。您可以输出图像、PDF 文件，甚至 Flash 电影。您还可以输出任意的文本，比如 XHTML 和 XML。</p><h2 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2. 搭建环境"></a>2. 搭建环境</h2><p>​想要学习PHP语言，我们还需要搭建一个PHP语言所需要的环境，和一个服务器（这里我们使用nginx）。</p><h3 id="2-1-下载所需软件"><a href="#2-1-下载所需软件" class="headerlink" title="2.1 下载所需软件"></a>2.1 下载所需软件</h3><ul><li><strong>Nginx：</strong>从[官网](<a href="https://nginx.org/en/download.html">nginx: download</a>)下载Windows版（选择mainline版本）</li><li><strong>PHP：</strong>从[Windows PHP](<a href="https://windows.php.net/download/">PHP For Windows: Binaries and sources Releases</a>)下载ThreadSafe版本</li></ul><h3 id="2-2-PHP安装"><a href="#2-2-PHP安装" class="headerlink" title="2.2 PHP安装"></a>2.2 PHP安装</h3><ul><li><p>将下载的PHP压缩包解压在C盘的根目录下（C:&#x2F;php）。</p></li><li><p>将 C:&#x2F;php&#x2F; 目录下的 php.ini-development 文件改为 php.ini 。</p></li><li><p>之后修改php配置文件，打开常用的扩展文件。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extension_dir</span>=<span class="string">&quot;ext&quot;</span></span><br><span class="line"><span class="attr">cgi.fix_pathinfo</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enable_dl</span>=<span class="literal">Off</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 开启常用扩展</span></span><br><span class="line"><span class="attr">extension</span>=curl</span><br><span class="line"><span class="attr">extension</span>=gd</span><br><span class="line"><span class="attr">extension</span>=mbstring</span><br><span class="line"><span class="attr">extension</span>=mysqli</span><br><span class="line"><span class="attr">extension</span>=openssl</span><br><span class="line"><span class="attr">extension</span>=pdo_mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">; 启用OPcache加速</span></span><br><span class="line"><span class="attr">zend_extension</span>=opcache</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-NGINX配置（nginx-conf）和启用PHP解析（FastCGI）"><a href="#2-3-NGINX配置（nginx-conf）和启用PHP解析（FastCGI）" class="headerlink" title="2.3 NGINX配置（nginx.conf）和启用PHP解析（FastCGI）"></a>2.3 NGINX配置（nginx.conf）和启用PHP解析（FastCGI）</h3><p>​将下载好的NGINX压缩包解压在合适的位置，完成后我们打开conf文件夹下的nginx.conf文件，配置以下选项。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span>           html;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line"></span><br><span class="line"><span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​需要注意的是http协议的默认端口为80，如果用户的80端口已经被占用，我们在运行nginx.exe时是无法启用的，这里我们可以通过修改<code>server</code>下的监听端口<code>listen</code>来避免此问题。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="comment"># listen       80;</span></span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">5050</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br></pre></td></tr></table></figure><h3 id="2-4-测试环境"><a href="#2-4-测试环境" class="headerlink" title="2.4 测试环境"></a>2.4 测试环境</h3><p>​在配置好所有环境之后我们还需要重启nginx来保证，刚刚修改的内容正常应用，在nginx目录下打开终端输入下面的指令来重启nginx。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>​重启后我们访问<a href="http://localhost:5050（注意：这里的端口是我自己使用的监听端口）就可以看到我们的服务器已经启动了。">http://localhost:5050（注意：这里的端口是我自己使用的监听端口）就可以看到我们的服务器已经启动了。</a></p><p><img src="/../images/PHP/1.png" alt="1"></p><p>​接下来我们需要创建一个PHP文件来测试我们的环境是否配置成功，首先运行fast-cgi代理，在php根目录下用管理员权限打开终端，输入下面的指令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-cgi.exe -b <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9000</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong>不要中断运行！</li></ul><p>​之后在 nginx&#x2F;html&#x2F; 目录下创建test.php文件，并输入下面的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello PHP!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>保存后进入<a href="http://localhost:5050/1.php%E3%80%82%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82">http://localhost:5050/1.php。就可以看到我们已经连接成功了。</a></p><p><img src="/../images/PHP/2.png" alt="2"></p><h2 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h2><h3 id="3-1-格式"><a href="#3-1-格式" class="headerlink" title="3.1 格式"></a>3.1 格式</h3><p>​PHP脚本可以放在文件中的任何位置，脚本以<code>&lt;?php</code>开始，以<code>?&gt;</code>结束，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// PHP 代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>//</code>是PHP的单行注释，要是想要多行注释则需要借助<code>/* */</code>来完成。</p><h3 id="3-2-第一个PHP程序"><a href="#3-2-第一个PHP程序" class="headerlink" title="3.2 第一个PHP程序"></a>3.2 第一个PHP程序</h3><p>​在刚刚的测试用例中我们已经演示过这个例子了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello PHP!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>​变量是所有编程语言中都有的概念，是用于程序存储数据的”容器”。</p><p>PHP中通过语法：<code>$变量名 = 变量值;</code>来定义变量，PHP属于弱类型语言，所以变量声明的时候不需要设置数据类型，变量的类型取决于值得类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="number">3</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="number">6</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$a</span>+<span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 输出的结果为9</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><p>​PHP中的数据类型也分为这几大类：String（字符串）、 Integer（整型）、 Float（浮点型）、Boolean（布尔型）、 Array（数组）、Object（对象）、 NULL（空值）。</p><h3 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h3><p>​就像刚刚第一个程序中的<code>Hello PHP!</code>一样，一个字符串是一串字符的序列。我们可以将任何文本放在单引号和双引号中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-整数和浮点数"><a href="#4-2-整数和浮点数" class="headerlink" title="4.2 整数和浮点数"></a>4.2 整数和浮点数</h3><p>​<strong>整数</strong>是一个没有小数的数字。<strong>浮点数</strong>是带小数部分的数字，或是指数形式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="number">1359</span>;</span><br><span class="line">    <span class="variable">$x</span> = -<span class="number">345</span>; <span class="comment">// 负数 </span></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">0x8C</span>; <span class="comment">// 十六进制数</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">047</span>; <span class="comment">// 八进制数 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="number">10.365</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>); <span class="comment">// 输出float(10.365)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  <span class="comment">// 换行</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">2.4e3</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>); <span class="comment">// 输出float(2400)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong><code>var_dump()</code>函数可以返回变量的数据类型和值。</li></ul><h3 id="4-3-布尔类型"><a href="#4-3-布尔类型" class="headerlink" title="4.3 布尔类型"></a>4.3 布尔类型</h3><p>​布尔型可以是<code>TRUE</code>或<code>FALSE</code>，<code>TRUE</code>标识真，<code>FALSE</code>标识假。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="literal">true</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-对象类型"><a href="#4-4-对象类型" class="headerlink" title="4.4 对象类型"></a>4.4 对象类型</h3><p>​对象类型可以用于存储数据，使用<code>class</code>关键字声明类对象，类包含属性和方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//类名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">      <span class="comment">//属性</span></span><br><span class="line">      <span class="keyword">var</span> <span class="variable">$color</span>;</span><br><span class="line">      <span class="comment">//方法</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;方法1&quot;</span>;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-NULL值"><a href="#4-5-NULL值" class="headerlink" title="4.5 NULL值"></a>4.5 NULL值</h3><p><code>NULL</code>值表示变量没有值，<code>NULL</code> 是数据类型为 NULL 的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="variable">$x</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>); <span class="comment">// 输出的结果是 NULL</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释：</strong>这里先将字符串<code>Hello world!</code>赋值给变量<code>$x</code>，之后又将<code>$x</code>的值设置成<code>null</code>（空值），<code>null</code>类型会被直接输出为<code>NULL</code>。</li></ul><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h2><h3 id="5-1-算数运算符"><a href="#5-1-算数运算符" class="headerlink" title="5.1 算数运算符"></a>5.1 算数运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th><th align="center"><strong>格式</strong></th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加</td><td align="center"><code>$a + $b</code></td></tr><tr><td align="center"><code>-</code></td><td align="center">减</td><td align="center"><code>$a - $b</code>或<code>-$a</code></td></tr><tr><td align="center"><code>*</code></td><td align="center">乘</td><td align="center"><code>$a * $b</code></td></tr><tr><td align="center"><code>/</code></td><td align="center">除</td><td align="center"><code>$a / $b</code>（返回浮点数）</td></tr><tr><td align="center"><code>%</code></td><td align="center">取余</td><td align="center"><code>$a % $b</code>（返回余数）</td></tr><tr><td align="center"><code>**</code></td><td align="center">幂运算</td><td align="center"><code>$a ** $b</code>（如 <code>2**3</code> 结果为 <code>8</code>）</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">5</span> + <span class="number">3</span>;   <span class="comment">// 输出8</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">10</span> % <span class="number">3</span>;  <span class="comment">// 输出1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> ** <span class="number">4</span>;  <span class="comment">// 输出16</span></span><br></pre></td></tr></table></figure><h3 id="5-2-赋值运算符"><a href="#5-2-赋值运算符" class="headerlink" title="5.2 赋值运算符"></a>5.2 赋值运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th><th align="center"><strong>格式</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">赋值运算符</td><td align="center"><code>$a = 5</code></td><td align="center">基本赋值</td></tr><tr><td align="center"><code>+=</code></td><td align="center">加法复制运算符</td><td align="center"><code>$a += 5</code></td><td align="center"><code>$a = $a + 5</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">减法复制运算符</td><td align="center"><code>$a -= 5</code></td><td align="center"><code>$a = $a - 5</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">乘法赋值运算符</td><td align="center"><code>$a *= 5</code></td><td align="center"><code>$a = $a * 5</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">除法赋值运算符</td><td align="center"><code>$a /= 5</code></td><td align="center"><code>$a = $a / 5</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">取余赋值运算符</td><td align="center"><code>$a %= 5</code></td><td align="center"><code>$a = $a % 5</code></td></tr><tr><td align="center"><code>**=</code></td><td align="center">幂运算赋值运算符</td><td align="center"><code>$a **= 5</code></td><td align="center"><code>$a = $a ** 5</code></td></tr><tr><td align="center"><code>.=</code></td><td align="center">拼接赋值运算符</td><td align="center"><code>$str .= &quot; PHP&quot;</code></td><td align="center">字符串连接</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本赋值</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> += <span class="number">5</span>;      <span class="comment">// $a = 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串连接</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line"><span class="variable">$str</span> .= <span class="string">&quot; PHP&quot;</span>; <span class="comment">// &quot;Hi PHP&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-比较运算符"><a href="#5-3-比较运算符" class="headerlink" title="5.3 比较运算符"></a>5.3 比较运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th></tr></thead><tbody><tr><td align="center"><code>==</code></td><td align="center">等于</td></tr><tr><td align="center"><code>===</code></td><td align="center">全等</td></tr><tr><td align="center"><code>!=</code> 或 <code>&lt;&gt;</code></td><td align="center">不等于</td></tr><tr><td align="center"><code>!==</code></td><td align="center">不全等</td></tr><tr><td align="center"><code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code></td><td align="center">大小比较</td></tr><tr><td align="center"><code>&lt;=&gt;</code></td><td align="center">太空船运算符（返回-1<code>, </code>0<code>, </code>1）</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;5&quot;</span> == <span class="number">5</span>);   <span class="comment">// true（值相同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;5&quot;</span> === <span class="number">5</span>);  <span class="comment">// false（类型不同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">2</span> &lt;=&gt; <span class="number">3</span>);    <span class="comment">// -1（2小于3）</span></span><br></pre></td></tr></table></figure><h3 id="5-4-逻辑运算符"><a href="#5-4-逻辑运算符" class="headerlink" title="5.4 逻辑运算符"></a>5.4 逻辑运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th></tr></thead><tbody><tr><td align="center"><code>&amp;&amp;</code> 或 <code>and</code></td><td align="center">逻辑与</td></tr><tr><td align="center"><code>||</code> 或 <code>or</code></td><td align="center">逻辑或</td></tr><tr><td align="center"><code>!</code></td><td align="center">逻辑非</td></tr><tr><td align="center"><code>xor</code></td><td align="center">异或</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$b</span> &lt; <span class="number">10</span>) &#123; &#125;<span class="comment">/* 同时成立时触发 */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$is_valid</span>) &#123; &#125;<span class="comment">/* $is_valid为false时触发 */</span> </span><br></pre></td></tr></table></figure><h3 id="5-5-字符串运算符"><a href="#5-5-字符串运算符" class="headerlink" title="5.5 字符串运算符"></a>5.5 字符串运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td align="center">连接字符串</td></tr><tr><td align="center"><code>.=</code></td><td align="center">连接并赋值</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello &quot;</span> . <span class="variable">$name</span>; <span class="comment">// &quot;Hello Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line"><span class="variable">$str</span> .= <span class="string">&quot; PHP&quot;</span>; <span class="comment">// &quot;Hi PHP&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-递增-递减运算符"><a href="#5-6-递增-递减运算符" class="headerlink" title="5.6 递增&#x2F;递减运算符"></a>5.6 递增&#x2F;递减运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th></tr></thead><tbody><tr><td align="center"><code>++$a</code></td><td align="center">前递增（先加后返回值）</td></tr><tr><td align="center"><code>$a++</code></td><td align="center">后递增（先返回值后加）</td></tr><tr><td align="center"><code>--$a</code></td><td align="center">前递减（先减后返回值）</td></tr><tr><td align="center"><code>$a--</code></td><td align="center">后递减（先返回值后减）</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> ++<span class="variable">$x</span>; <span class="comment">// 6（$x先变成6，再输出）</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>++; <span class="comment">// 6（输出6，然后$x变7）</span></span><br></pre></td></tr></table></figure><h3 id="5-7-数组运算符"><a href="#5-7-数组运算符" class="headerlink" title="5.7 数组运算符"></a>5.7 数组运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">合并数组（保留第一个数组的键）</td></tr><tr><td align="center"><code>==</code></td><td align="center">键值对相同</td></tr><tr><td align="center"><code>===</code></td><td align="center">键值对相同且顺序、类型一致</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>; <span class="comment">// [1, 2]（相同键名会被忽略）</span></span><br></pre></td></tr></table></figure><h3 id="5-8-错误控制运算符"><a href="#5-8-错误控制运算符" class="headerlink" title="5.8 错误控制运算符"></a>5.8 错误控制运算符</h3><p>​<code>@</code> 抑制错误：<code>@file(&#39;none.txt&#39;);</code>（不显示警告）</p><h3 id="5-9-位运算符"><a href="#5-9-位运算符" class="headerlink" title="5.9 位运算符"></a>5.9 位运算符</h3><table><thead><tr><th align="center"><strong>运算符</strong></th><th align="center"><strong>名称</strong></th></tr></thead><tbody><tr><td align="center"><code>&amp;</code></td><td align="center">按位与</td></tr><tr><td align="center"><code>|</code></td><td align="center">按位或</td></tr><tr><td align="center"><code>^</code></td><td align="center">按位异或</td></tr><tr><td align="center"><code>~</code></td><td align="center">按位取反</td></tr><tr><td align="center"><code>&lt;&lt;</code></td><td align="center">左移</td></tr><tr><td align="center"><code>&gt;&gt;</code></td><td align="center">右移</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">9</span> &amp; <span class="number">3</span>; <span class="comment">// 1（二进制 1001 &amp; 0011 = 0001）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础（二）</title>
      <link href="/2025/05/14/JavaScript%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/05/14/JavaScript%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础（二）"><a href="#JavaScript基础（二）" class="headerlink" title="JavaScript基础（二）"></a>JavaScript基础（二）</h1><h2 id="1-JS的流程控制和函数"><a href="#1-JS的流程控制和函数" class="headerlink" title="1. JS的流程控制和函数"></a>1. JS的流程控制和函数</h2><h3 id="1-1-JS分支结构"><a href="#1-1-JS分支结构" class="headerlink" title="1.1 JS分支结构"></a>1.1 JS分支结构</h3><h4 id="1-1-1-if结构"><a href="#1-1-1-if结构" class="headerlink" title="1.1.1 if结构"></a>1.1.1 <code>if</code>结构</h4><ul><li><p>JS的<code>if</code>关于真假的判断还和上篇文章所说的一样：0，空字符串，null，undefined  都为假,除此之外都为真。</p></li><li><p><strong><code>if</code>语法的基本结构：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 条件1为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 条件2为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 所有条件都不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>代码示例解析：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> level = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(level === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;奖励1500块&#x27;</span>);  <span class="comment">// ✔️ 条件1成立，输出此句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(level === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;奖励1000块&#x27;</span>);  <span class="comment">// ❌ 条件2不成立</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;奖励500块&#x27;</span>);   <span class="comment">// ❌ 前两个条件都不成立时执行</span></span><br><span class="line">&#125; <span class="comment">// 执行的结果是 奖励1500块</span></span><br></pre></td></tr></table></figure></li><li><p><strong>核心规则：</strong></p><ul><li><code>if</code> 可以单独使用。</li><li><code>else if</code> 和 <code>else</code> 必须与 <code>if</code> 连用</li><li>代码会从上到下检查条件，第一个满足条件的分支会执行，后续分支直接跳过，如果所有条件都不满足，执行 <code>else</code> 分支（如果有）。</li></ul></li></ul><h4 id="1-1-2-switch结构"><a href="#1-1-2-switch结构" class="headerlink" title="1.1.2 switch结构"></a>1.1.2 <code>switch</code>结构</h4><ul><li><p><strong><code>switch</code>语法的基本结构：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    <span class="comment">// 当表达式 === 值1 时执行</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    <span class="comment">// 当表达式 === 值2 时执行</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// 没有匹配到任何 case 时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>代码示例解析：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入语音提示服务编号&#x27;</span>)</span><br><span class="line">num = <span class="title class_">Number</span>(num) <span class="comment">// 用户输入的信息默认都是字符串类型，所以我们这里将字符串转化为数值型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//switch穿透问题-必须添加break</span></span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;话费业务1&#x27;</span>) <span class="comment">// num === 1 时执行</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// 必须用 break 退出 switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流量业务2&#x27;</span>) <span class="comment">// num === 2 时执行</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;宽带业务3&#x27;</span>) <span class="comment">// num === 3 时执行</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;国际业务4&#x27;</span>) <span class="comment">// num == 4 时执行</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;投诉建议5&#x27;</span>) <span class="comment">// num === 5 时执行</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>: </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有该业务&#x27;</span>) <span class="comment">// num === 6 时执行   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>核心规则：</strong></p><ul><li>严格相等比较：<code>switch</code> 会用 <code>===</code> 比较表达式和 <code>case</code> 的值，要求值和类型都相同。</li><li><code>break</code>关键字：每个 <code>case</code> 后必须写 <code>break</code>，否则代码会继续执行下一个 <code>case</code>（称为“贯穿”）。</li><li><code>default</code>分支：当所有 <code>case</code> 都不匹配时执行，类似 <code>if-else</code> 中的 <code>else</code>。</li></ul></li><li><p><code>swith</code>与<code>if-else</code>在用法上还是有一定区别的：</p></li><li><table><thead><tr><th align="center">特性</th><th align="center"><code>switch</code></th><th align="center"><code>if-else</code></th></tr></thead><tbody><tr><td align="center"><strong>比较方式</strong></td><td align="center">严格相等 (<code>===</code>)</td><td align="center">任意条件表达式</td></tr><tr><td align="center"><strong>适用场景</strong></td><td align="center">多固定值匹配</td><td align="center">范围判断或复杂条件</td></tr><tr><td align="center"><strong>可读性</strong></td><td align="center">多分支时更清晰</td><td align="center">简单分支时更直接</td></tr></tbody></table></li></ul><h3 id="1-2-JS循环结构"><a href="#1-2-JS循环结构" class="headerlink" title="1.2 JS循环结构"></a>1.2 JS循环结构</h3><h4 id="1-2-1-while循环"><a href="#1-2-1-while循环" class="headerlink" title="1.2.1 while循环"></a>1.2.1 <code>while</code>循环</h4><ul><li><p><strong><code>while</code>基本语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    <span class="comment">// 条件为 true 时重复执行的代码（循环体）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>特点：</strong>先判断条件，再执行循环体（可能一次都不执行）。</li></ul></li><li><p><strong>代码示例解析</strong></p><ul><li><p><strong>1. 计算 1~100 的累加和</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;      <span class="comment">// 初始化计数器</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;    <span class="comment">// 初始化累加器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    sum += i;   <span class="comment">// 累加当前 i 的值</span></span><br><span class="line">    i++;        <span class="comment">// 更新计数器（避免死循环的关键）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出：5050</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>逻辑：</strong>循环 100 次，每次将 <code>i</code> 的值累加到 <code>sum</code>，最终得到总和。</p><ul><li><p><strong>2. 找出 1~100 中能被 10 整除的数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">10</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(j + <span class="string">&#x27;: 能够被整除&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>输出</strong>：<br><code>10: 能够被整除</code><br><code>20: 能够被整除</code><br>…<br><code>100: 能够被整除</code></p></li></ul></li><li><p><strong>核心规则</strong></p><ul><li><strong>必须包含循环终止条件</strong><br>例如 <code>i++</code> 或 <code>j++</code>，否则会导致死循环（浏览器卡死）。</li><li><strong>循环条件为 <code>true</code> 时执行</strong><ul><li>若条件始终为 <code>true</code>，循环永不停止（需强制关闭页面）。</li><li>示例错误：若忘记写 <code>i++</code>，<code>i</code> 永远小于 100，导致死循环。</li></ul></li><li><strong>支持 <code>break</code> 和 <code>continue</code></strong><ul><li><code>break</code>：立即终止整个循环。</li><li><code>continue</code>：跳过本次循环，直接进入下一次。</li></ul></li></ul></li></ul><h4 id="1-2-2-for循环"><a href="#1-2-2-for循环" class="headerlink" title="1.2.2 for循环"></a>1.2.2 <code>for</code>循环</h4><ul><li><p><strong><code>for</code>的基本语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 循环条件; 迭代操作)&#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>执行顺序：</strong>初始化 → 检查条件 → 执行循环体 → 迭代操作 → 重复检查条件。</li></ul></li><li><p><strong>代码示例解析</strong></p><ul><li><p><strong>1.基础<code>for</code>循环</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环10次，输出1~10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;循环次数:&#x27;</span>+i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：循环次数:1 ~ 循环次数:10</span></span><br></pre></td></tr></table></figure></li><li><p><strong>2.猜字谜游戏</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> successData = <span class="string">&#x27;K&#x27;</span>; <span class="comment">// 正确答案</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>; j&lt;=<span class="number">3</span>; j++)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入字母A-Z（剩余机会:&#x27;</span> + (<span class="number">3</span>-j+<span class="number">1</span>) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(data === successData)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;猜对了!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 立即终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;猜错了!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>break</code> 作用：匹配成功后直接跳出循环，不再执行后续机会。</li></ul></li></ul></li><li><p><strong>数组遍历方法</strong></p><p>​接下来我们要提到数组的<code>for</code>循环遍历，所以先来简单介绍一下JS的数组，它与C语言中的数组没有太大区别。</p><ul><li><p><strong>定义：</strong>数组（Array）是用于存储 <strong>有序元素集合</strong> 的数据结构。</p></li><li><p><strong>特点：</strong></p><ul><li>元素可以是任意类型（数字、字符串、对象等）。</li><li>索引从 <code>0</code> 开始（第一个元素是 <code>array[0]</code>）。</li><li>长度动态可变（无需预先定义大小）。</li></ul></li><li><p><strong>创建一个数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1：字面量直接创建</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="string">&quot;apple&quot;</span>, <span class="literal">true</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：使用构造函数</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">let</span> emptyArr = [];</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>基本操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;watermelon&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><ul><li><p>访问元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]); <span class="comment">// 输出：&quot;apple&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">2</span>]); <span class="comment">// 输出：&quot;orange&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>修改元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;watermelon&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&quot;apple&quot;, &quot;watermelon&quot;, &quot;orange&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p>获取长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><p>在我们简单了解JS中的数组之后，接下来我们来看看JS中数组遍历的方法。</p></li><li><p><strong>传统<code>for</code>循环</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;array1.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array1[i]); <span class="comment">// 输出每个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for...in</code> 循环（遍历索引）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> array1)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array1[index]); <span class="comment">// 输出索引对应元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for...of</code> 循环（遍历元素）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> array1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 直接输出元素值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>forEach</code> 高阶函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array2 = [<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;小红&quot;</span>,<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;小李&quot;</span>,<span class="string">&quot;小赵&quot;</span>]</span><br><span class="line">array2.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot;||&quot;</span> + item); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出示例：0||小明  1||小红 ...</span></span><br></pre></td></tr></table></figure></li><li><p><strong>遍历方式对比</strong></p></li><li><table><thead><tr><th align="center">遍历方式</th><th align="center">特点</th><th align="center">适用场景</th></tr></thead><tbody><tr><td align="center"><code>for</code></td><td align="center">精确控制索引，可修改原数组</td><td align="center">需要索引操作的遍历</td></tr><tr><td align="center"><code>for...in</code></td><td align="center">遍历索引（含继承属性，需谨慎）</td><td align="center">对象属性遍历更常见</td></tr><tr><td align="center"><code>for...of</code></td><td align="center">直接获取元素，简洁高效</td><td align="center">仅需元素值的数组遍历</td></tr><tr><td align="center"><code>forEach</code></td><td align="center">函数式编程风格，不可中断</td><td align="center">简单遍历且无需中断时</td></tr></tbody></table></li></ul></li></ul><h3 id="1-3-JS函数"><a href="#1-3-JS函数" class="headerlink" title="1.3 JS函数"></a>1.3 JS函数</h3><h4 id="1-3-1-内置函数"><a href="#1-3-1-内置函数" class="headerlink" title="1.3.1 内置函数"></a>1.3.1 内置函数</h4><ul><li><p>在JS中可以不需要对象调用,可以直接使用的函数</p></li><li><p>常见分类</p></li><li><p><strong>1. 弹框类函数</strong></p><ul><li><p><code>alert()</code></p><ul><li><p><strong>作用：</strong>弹出警告框，显示指定消息，需用户手动关闭。</p></li><li><p><strong>特点：</strong>阻塞后续代码执行，直到用户点击“确定”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是弹出框&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>confirm()</code></p><ul><li><p><strong>作用：</strong>弹出确认框，显示消息并提供“确定”和“取消”选项。</p></li><li><p><strong>返回值：</strong>用户点击“确定”返回 <code>true</code>，点击“取消”返回 <code>false</code>。</p></li><li><p><strong>使用场景：</strong>常用于删除、退出等操作的二次确认。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="title function_">confirm</span>(<span class="string">&#x27;你确定删除数据吗?&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">// 输出 true 或 false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>2. 控制台输出</strong></p><ul><li><p><code>console.log()</code></p><ul><li><p><strong>作用：</strong>在浏览器控制台输出信息，用于调试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123132123123&quot;</span>); <span class="comment">// 控制台显示字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// 输出变量值（如日期对象）</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>3. 时间处理</strong></p><ul><li><p><code>Date</code>对象</p><ul><li><p><strong>作用：</strong>创建日期对象，用于获取或操作时间。</p></li><li><p><strong>初始化：</strong><code>new Date()</code>获取当前时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// 输出：Thu Jun 06 2024 12:34:56 GMT+0800</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>4. 全局对象</strong></p><ul><li><p><code>this</code>关键字</p></li><li><p><strong>全局作用域中：</strong>指向全局对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">print</span>(); <span class="comment">// 等同于 window.print()</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>5. 页面打印</strong></p><ul><li><p><code>print()</code></p><ul><li><p><strong>作用：</strong>调起浏览器打印对话框，打印当前页面内容。</p></li><li><p><strong>注意：</strong>部分浏览器可能限制自动调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">print</span>(); <span class="comment">// 等同于 window.print()</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>6. 其他注意事项</strong></p><ul><li><strong>内置函数与宿主环境</strong><ul><li><code>alert()</code>, <code>confirm()</code>, <code>print()</code> 属于 BOM（浏览器对象模型），由浏览器提供，非 ECMAScript 标准。</li><li><code>Date</code>, <code>console</code> 是 JavaScript 内置对象&#x2F;方法。</li></ul></li><li><strong>代码执行顺序</strong><ul><li><code>alert()</code> 和 <code>confirm()</code> 会阻塞后续代码，直到用户响应。</li></ul></li></ul></li></ul><h4 id="1-3-2-function-函数（自定义函数）"><a href="#1-3-2-function-函数（自定义函数）" class="headerlink" title="1.3.2 function()函数（自定义函数）"></a>1.3.2 <code>function()</code>函数（自定义函数）</h4><ul><li><p><strong>函数语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表) &#123;函数体&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>函数说明：</strong></p><ul><li>声明函数时需要用<code>function</code>关键字。</li><li>参数列表中，无需数据类型。</li><li>调用函数时，实参和形参的个数可以不一致。</li><li>不用声明函数的返回值类型，需要返回在函数体中直接<code>return</code>即可，也无需<code>void</code>关键字。</li></ul></li><li><p><strong>函数定义与分类</strong></p><ul><li><p><strong>1. 无参无返回值函数</strong></p><ul><li><p><strong>特点：</strong>不接收参数，不返回数据，直接执行操作（如页面输出）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;计算结果:&quot;</span> + sum); <span class="comment">// 直接输出到页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调用方式</strong>：<code>onclick=&quot;sum()&quot;</code>（实参按顺序传递）。</p></li></ul></li><li><p><strong>2. 有参无返回值函数</strong></p><ul><li><p><strong>特点：</strong>接收参数（形参），完成操作但不返回数据。</p></li><li><p><strong>参数规则</strong>：形参顺序决定实参赋值，与名称无关。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum2</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = num1 + num2;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;计算结果:&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调用方式</strong>：<code>onclick=&quot;sum2(100, 66)&quot;</code>（实参按顺序传递）。</p></li></ul></li><li><p><strong>3. 有参有返回值函数</strong></p><ul><li><p><strong>特点</strong>：接收参数并通过 <code>return</code> 返回结果，供其他代码使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">appendMessage</span>(<span class="params">id, name, age, gender</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;|&quot;</span> + name + <span class="string">&quot;|&quot;</span> + age + <span class="string">&quot;|&quot;</span> + gender; <span class="comment">// 返回拼接的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调用方式</strong>：在另一个函数中获取返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">appendMessage</span>(<span class="number">100</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 调用并接收返回值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>4. 匿名函数</strong></p><ul><li><p><strong>特点</strong>：没有函数名，可直接赋值给变量或作为参数传递。</p></li><li><p><strong>常见用途</strong>：事件处理、立即执行函数、回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> multiply = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 作为按钮点击事件处理函数</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;按钮被点击了！&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 立即执行函数 (IIFE)</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;页面加载时自动执行&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>参数与返回值</strong></p><ul><li><p><strong>形参与实参</strong></p><ul><li><strong>形参</strong>：函数定义时声明的变量（如 <code>num1, num2</code>），用于接收外部传入的值。</li><li><strong>实参</strong>：调用函数时传递的具体值（如 <code>sum2(100, 66)</code> 中的 <code>100</code> 和 <code>66</code>）。</li><li><strong>规则</strong>：实参按顺序赋值给形参，数量需匹配。</li></ul></li><li><p><strong>返回值</strong></p><ul><li><p><strong><code>return</code> 关键字</strong>：将函数内部计算结果传递给调用者。</p></li><li><p><strong>无返回值</strong>：函数默认返回 <code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title function_">appendMessage</span>(...); <span class="comment">// 接收返回值并存储到变量</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>函数调用与嵌套</strong></p><ul><li><p><strong>函数间调用</strong></p><ul><li><p>一个函数内部可以调用其他函数，传递参数并处理返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">appendMessage</span>(<span class="number">100</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;男&#x27;</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(message); <span class="comment">// 输出拼接后的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>事件触发调用</strong></p><ul><li><p>通过 HTML 事件（如 <code>onclick</code>）直接调用函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;sum3()&quot;</span>&gt;有参数-有返回值的计算&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="1-4-JS的对象和JSON"><a href="#1-4-JS的对象和JSON" class="headerlink" title="1.4 JS的对象和JSON"></a>1.4 JS的对象和JSON</h3><h4 id="1-4-1-对象基础"><a href="#1-4-1-对象基础" class="headerlink" title="1.4.1 对象基础"></a>1.4.1 对象基础</h4><ul><li><p><strong>1. 定义对象</strong></p><p>使用字面量语法 <code>&#123;&#125;</code> 定义对象，包含属性和值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;1102112234199012200221&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张飞&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>2. 属性操作</strong></p><ul><li><p><strong>取值：</strong>通过点语法<code>对象.属性名</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 输出张飞</span></span><br></pre></td></tr></table></figure></li><li><p><strong>赋值：</strong>直接修改属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;关羽&#x27;</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">33</span></span><br></pre></td></tr></table></figure></li><li><p><strong>动态添加属性：</strong>可随时扩展对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">color</span> = <span class="string">&#x27;yellow&#x27;</span> <span class="comment">// 新增color属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>3. 对象输出</strong></p><p>直接打印对象到控制台。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// 显示完整对象结构</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-对象与函数结合"><a href="#1-4-2-对象与函数结合" class="headerlink" title="1.4.2 对象与函数结合"></a>1.4.2 对象与函数结合</h4><ul><li><p><strong>1. 对象作为参数传递</strong></p><p>对象可以传送到函数内部进行修改（按引用传递）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础（一）</title>
      <link href="/2025/05/13/JavaScript%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/13/JavaScript%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础（一）"><a href="#JavaScript基础（一）" class="headerlink" title="JavaScript基础（一）"></a>JavaScript基础（一）</h1><h2 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1. JavaScript简介"></a>1. JavaScript简介</h2><p><strong>简述：</strong>JavaScript（简称“JS”） 是解释型轻量级的函数式编程语言。</p><p><strong>特点：</strong></p><ul><li><p><strong>脚本语言：</strong>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行，JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。</p></li><li><p><strong>基于对象：</strong>JavaScript是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。但是面向对象的三大特性：『封装』、『继承』、『多态』中，JavaScript能够实现封装，可以模拟继承，不支持多态，所以它不是一门面向对象的编程语言。</p></li><li><p><strong>弱类型：</strong>JavaScript中也有明确的数据类型，但是声明一个变量后它可以接收任何类型的数据，并且会在程序执行过程中根据上下文自动转换类型。</p></li><li><p><strong>事件驱动：</strong>JavaScript是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。</p></li><li><p><strong>跨平台性：</strong>JavaScript脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支持JavaScript脚本语言。目前JavaScript已被大多数的浏览器所支持。</p></li></ul><h3 id="1-1-组成部分"><a href="#1-1-组成部分" class="headerlink" title="1.1 组成部分"></a>1.1 组成部分</h3><p><strong>组成：</strong>JS由ECMA核心、BOM、DOM三部分组成。</p><ul><li><strong>ECMAScript</strong>描述了语法、类型、语句、关键字、保留字、运算符和对象。它就是定义了脚本语言的所有属性、方法和对象。</li><li><strong>DOM编程</strong>其实就是用window对象的document属性的相关API完成对页面元素的控制的编程。</li><li><strong>BOM编程</strong>是Browser Object Model的简写，即浏览器对象模型，有一系列对象组成，是访问、控制、修改浏览器的属性和方法。</li></ul><h3 id="1-2-JS的引入方式"><a href="#1-2-JS的引入方式" class="headerlink" title="1.2 JS的引入方式"></a>1.2 JS的引入方式</h3><p><strong>1. 内部脚本方式引入：</strong></p><p>​在页面中，通过一对<code>script</code>标签来引入JS代码（<code>script</code>代码的放置有一定的随机性，但一般放在<code>head</code>标签中。）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;这是一个内部脚本引入的例子&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;A()&quot;</span>&gt;</span>请点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：这是一个简单的内部引入的例子，首先我们在<code>script</code>标签中创建了一个<code>A()</code>函数，这个函数的作用是在页面弹框输出一段话，之后我们又通过<code>button</code>创建一个按钮来调用这个函数，这样我们就达成了在页面中弹框输出的效果，进入到页面中我们只要点击按钮就可以触发弹窗输出效果：</li></ul><p><img src="/../images/JS/1.png" alt="1"></p><p><strong>2. 外部脚本方式引入：</strong></p><p>​我们可以将脚本放在独立的js文件中，通过script标签引入外部脚本文件（一对script标签要么用于定义内部脚本，要么用于引入外部js文件，不能混用，一个html文档中，可以有多个script标签 ）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./外部引入.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;B()&quot;</span>&gt;</span>请点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/JS/2.png" alt="2"></p><ul><li><strong>解释：</strong>首先我我们在<code>script</code>标签中通过<code>src</code>来找到我们需要引入的外部js文件，然后之后就可以调用js文件了，在页面中的效果如下：</li></ul><p><img src="/../images/JS/3.png" alt="3"></p><h2 id="2-JS的数据类型和运算符"><a href="#2-JS的数据类型和运算符" class="headerlink" title="2. JS的数据类型和运算符"></a>2. JS的数据类型和运算符</h2><h3 id="2-1-JS的变量"><a href="#2-1-JS的变量" class="headerlink" title="2.1 JS的变量"></a>2.1 JS的变量</h3><ul><li><strong>关键字：</strong>JS通过<code>var</code>和<code>let</code>定义变量。但这里我们推荐使用<code>let</code>因为<code>var</code>可能会导致变量的重复使用而出现问题。</li><li><strong>数据类型：</strong>JS的变量是弱类型的，可以接收任意类型的数据</li><li><strong>标识符：</strong>严格区分大小写</li><li><strong>变量使用规则</strong><ul><li>如果使用了一个没有声明的变量，那么会在运行时报错。</li><li>如果声明一个变量没有初始化，那么这个变量的值就是undefined。</li></ul></li></ul><h3 id="2-2-JS的数据类型"><a href="#2-2-JS的数据类型" class="headerlink" title="2.2 JS的数据类型"></a>2.2 JS的数据类型</h3><p>​JS的数据类型统一为number，没有整数和浮点数之分；它同时也不区分字符和字符串；单引号和双引号也没有具体的区别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.定义数值型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> num1 = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="number">10000.00000000000000001111111</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(num1 + num2) <span class="comment">// 页面弹窗的结果为 10100</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//2.字符串</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> str1 = <span class="string">&quot;你好世界&quot;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> str2 = <span class="string">&#x27;我的世界&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(str1 + str2) <span class="comment">// 页面弹窗的结果为 你好世界我的世界</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​JS的布尔类型为boolen，包含true和false。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.布尔类型   </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> b1 = <span class="literal">true</span>   <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b2 = <span class="literal">false</span>  <span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b3 = <span class="literal">true</span> + <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(b3) <span class="comment">// 弹窗结果为 1</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> flag = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;恭喜你-顺利毕业&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;很遗憾-考试没过&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="comment">// 弹窗结果为 很遗憾-考试没过</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​在JS中其他类型和布尔类型可以自动转换：</p><ul><li>true：非零的数值，非空字符串，非空对象。</li><li>false：0，空字符串（<code>&#39;&#39;</code>），null，undefined，NaN。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> str = <span class="string">&#x27;            &#x27;</span><span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(str)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;我是true的&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;我是false的&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="comment">// 弹框输出的结果为 我是true的</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释：</strong><code>if</code>中会将<code>str</code>类型自动转化为布尔类型，在这里<code>str</code>中有空格，所以属于非空字符串，JS会视为一个真值，所以会输出<code>if</code>里的内容。</li></ul><h3 id="2-3-JS的运算符"><a href="#2-3-JS的运算符" class="headerlink" title="2.3 JS的运算符"></a>2.3 JS的运算符</h3><ul><li><strong>算数运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">功能</th><th align="center">特殊规则</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加法运算符</td><td align="center">数值相加&#x2F;字符串拼接</td><td align="center">字符串优先拼接</td></tr><tr><td align="center"><code>-</code></td><td align="center">减法运算符</td><td align="center">数值相减</td><td align="center">非数值自动转数值</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘法运算符</td><td align="center">数值相乘</td><td align="center">非数值自动转数值</td></tr><tr><td align="center"><code>/</code></td><td align="center">除法运算符</td><td align="center">数值相除</td><td align="center">除零返回 <code>Infinity</code></td></tr><tr><td align="center"><code>%</code></td><td align="center">取模运算符</td><td align="center">求余数</td><td align="center">余数符号与被除数一致</td></tr></tbody></table><ul><li><p><strong>注意：</strong></p><ul><li>&#x2F; 在除0时，结果是Infinity ，而不是报错。</li><li>%在模0时，结果是NaN，意思为 not a number ，而不是报错。</li></ul></li><li><p><strong>复合算术运算符</strong></p></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">等价形式</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>++</code></td><td align="center">自增运算符</td><td align="center"><code>a = a + 1</code></td><td align="center"><code>a++</code> 或 <code>++a</code></td></tr><tr><td align="center"><code>--</code></td><td align="center">自减运算符</td><td align="center"><code>a = a - 1</code></td><td align="center"><code>a--</code> 或 <code>--a</code></td></tr><tr><td align="center"><code>+=</code></td><td align="center">加法赋值运算符</td><td align="center"><code>a = a + b</code></td><td align="center"><code>a += b</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">减法赋值运算符</td><td align="center"><code>a = a - b</code></td><td align="center"><code>a -= b</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">乘法赋值运算符</td><td align="center"><code>a = a * b</code></td><td align="center"><code>a *= b</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">除法赋值运算符</td><td align="center"><code>a = a / b</code></td><td align="center"><code>a /= b</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">取模赋值运算符</td><td align="center"><code>a = a % b</code></td><td align="center"><code>a %= b</code></td></tr></tbody></table><ul><li><p>符合算数运算符基本和JAVA一致,同样需要注意 &#x2F;&#x3D;和%&#x3D;</p><ul><li><p>在&#x2F;&#x3D;0时，结果是Infinity ，而不是报错。</p></li><li><p>在%&#x3D;0时，结果是NaN，意思为 not a number ，而不是报错。</p></li></ul></li><li><p><strong>关系运算符</strong></p></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">作用</th><th align="center">示例</th><th align="center">注意事项</th></tr></thead><tbody><tr><td align="center"><code>&gt;</code></td><td align="center">大于运算符</td><td align="center">判断左侧是否大于右侧</td><td align="center"><code>5 &gt; 3 → true</code></td><td align="center">字符串按 Unicode 顺序比较</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">小于运算符</td><td align="center">判断左侧是否小于右侧</td><td align="center"><code>2 &lt; 10 → true</code></td><td align="center">数值和字符串比较时会自动转换</td></tr><tr><td align="center"><code>&gt;=</code></td><td align="center">大于等于运算符</td><td align="center">判断左侧是否≥右侧</td><td align="center"><code>5 &gt;= 5 → true</code></td><td align="center">优先级低于算术运算符</td></tr><tr><td align="center"><code>&lt;=</code></td><td align="center">小于等于运算符</td><td align="center">判断左侧是否≤右侧</td><td align="center"><code>4 &lt;= 4 → true</code></td><td align="center">同上</td></tr><tr><td align="center"><code>==</code></td><td align="center">松散相等</td><td align="center">类型转换后比较值</td><td align="center"><code>&quot;5&quot; == 5 → true</code></td><td align="center"><code>NaN</code> 不等于自身</td></tr><tr><td align="center"><code>===</code></td><td align="center">严格相等</td><td align="center">值和类型都相同</td><td align="center"><code>&quot;5&quot; === 5 → false</code></td><td align="center">推荐使用</td></tr><tr><td align="center"><code>!=</code></td><td align="center">松散不等</td><td align="center">类型转换后比较值</td><td align="center"><code>5 != &quot;5&quot; → false</code></td><td align="center">实际是 <code>!(a == b)</code></td></tr><tr><td align="center"><code>!==</code></td><td align="center">严格不等</td><td align="center">值或类型不同</td><td align="center"><code>5 !== &quot;5&quot; → true</code></td><td align="center">推荐使用</td></tr></tbody></table><ul><li><p><strong>注意：</strong></p><ul><li><code>==</code>判断其中的数值是否相等，如果两端的数据类型不一致，会尝试将两端的数据转换成number，再对比number大小。<ul><li>‘123’  这种字符串可以转换成数字；</li><li>true会被转换成1 ，false会被转换成0；</li></ul></li><li><code>===</code>判断值是否相同并且判断类型是否相同，如果两端数据类型不一致，直接返回<code>false</code>，数据类型一致再比较是否相同。</li></ul></li><li><p><strong>逻辑运算符</strong></p></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">类型</th><th align="center">操作对象</th><th align="center">短路特性</th><th align="center">返回值规则</th></tr></thead><tbody><tr><td align="center"><code>||</code></td><td align="center">逻辑或</td><td align="center">真值&#x2F;假值</td><td align="center">✔️</td><td align="center">返回第一个 <strong>真值</strong></td></tr><tr><td align="center"><code>&amp;&amp;</code></td><td align="center">逻辑与</td><td align="center">真值&#x2F;假值</td><td align="center">✔️</td><td align="center">返回第一个 <strong>假值</strong></td></tr><tr><td align="center"><code>|</code></td><td align="center">按位或</td><td align="center">二进制位</td><td align="center">❌</td><td align="center">按位或运算（转32位整数）</td></tr><tr><td align="center"><code>&amp;</code></td><td align="center">按位与</td><td align="center">二进制位</td><td align="center">❌</td><td align="center">按位与运算（转32位整数）</td></tr></tbody></table><ul><li><p><strong>注意：</strong></p><ul><li><code>||</code>如果发现有一个为true，直接返回<code>true</code></li><li><code>&amp;&amp;</code>如果发现有一个为false，直接返回<code>false</code></li></ul><p><code>|</code> <code>&amp;</code>这两个运算符则需要判断两边的真假值才会输出结果，所以<code>||</code>和<code>&amp;&amp;</code>的效率更快，推荐在大部情况使用。</p></li><li><p><strong>条件运算符</strong></p><ul><li><strong>语法：</strong><code>条件 ? 表达式1 : 表达式2</code><ul><li>如果条件为真（<code>true</code>），返回 <code>表达式1</code> 的值。</li><li>如果条件为假（<code>false</code>），返回 <code>表达式2</code> 的值。</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> str = a ? <span class="string">&#x27;是真的&#x27;</span> : <span class="string">&#x27;是假的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><ul><li>解释：由于 <code>a</code> 是 <code>true</code>，三元运算符会选择第一个表达式 <code>&#39;是真的&#39;</code>，将其赋值给 <code>str</code>，代码运行后会在控制台输出：<code>&#39;是真的&#39;</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习--字典</title>
      <link href="/2025/04/16/Python%E5%AD%A6%E4%B9%A0--%E5%AD%97%E5%85%B8/"/>
      <url>/2025/04/16/Python%E5%AD%A6%E4%B9%A0--%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><blockquote><p>[!NOTE]</p><p>以下内容部分摘录自<code>《Python编程快速上手——让繁琐的工作自动化（第二版）》</code>，并加入了一些自己的理解，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-字典数据类型"><a href="#1-字典数据类型" class="headerlink" title="1. 字典数据类型"></a>1. 字典数据类型</h2><p>​像列表一样，字典是许多值的集合，但不像列表的索引，字典的索引可以使用许多不同的数据类型，不只是整数。</p><ul><li><strong>字典的索引</strong>：字典的索引被称之为“键”，键及其关联的值被称之为“键-值对”。</li><li><strong>注意</strong>：字典输入时带<code>&#123;&#125;</code>。</li></ul><p>​接下来我们可以试着创建一个字典并赋给变量<code>myCat</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myCat = &#123;<span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;fat&#x27;</span>, <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;disposition&#x27;</span>:<span class="string">&#x27;loud&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(myCat[<span class="string">&#x27;size&#x27;</span>]) <span class="comment"># 输出的结果是fat</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My cat has &#x27;</span> + myCat[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&#x27; fur&#x27;</span>) <span class="comment"># 输出的结果是My cat has gray fur</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：变量<code>myCat</code>中的这个字典的键就是<code>size</code>、<code>color</code>和<code>disposition</code>，而他们相对应的值对就是<code>fat</code>、<code>gray</code>、<code>loud</code>。而我们<code>print</code>所打印的值就是这些值。</li></ul><p>​就像列表一样字典也可以用整数作为键，但他可以是任何数字，不必用零开始，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="number">12345</span>: <span class="string">&#x27;Luggage Combination&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;The Answer&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">12345</span>], spam[<span class="number">42</span>]) <span class="comment"># 输出的结果为Luggage Combination The Answer</span></span><br></pre></td></tr></table></figure><h3 id="1-1-字典与列表"><a href="#1-1-字典与列表" class="headerlink" title="1.1 字典与列表"></a>1.1 字典与列表</h3><p><strong>不像列表，字典中的项目是不排序的。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>, <span class="string">&#x27;moose&#x27;</span>]</span><br><span class="line">bacon = [<span class="string">&#x27;dogs&#x27;</span>, <span class="string">&#x27;moose&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(spam == bacon) <span class="comment"># 输出的结果为False</span></span><br><span class="line"></span><br><span class="line">eggs = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;species&#x27;</span>: <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;8&#x27;</span>&#125;</span><br><span class="line">ham = &#123;<span class="string">&#x27;species&#x27;</span>: <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(eggs == ham) <span class="comment"># 输出的结果为True</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：在名为<code>spam</code>的列表中，第一项是<code>spam[0]</code>，但在字典中没有“第一个”项，虽然在确定两个列表是否相同的，表象的顺序很重要，但在字典中“键-值对”输入的顺序并不重要。（因为字典是不排序的，所以不能像列表那样切片）。</li></ul><p><strong>尝试访问列表中不存在的键，将会出现<code>KeyError</code>报错信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：输入以上代码并试着运行起来就会发现<code>KeyError</code>错误信息。</li></ul><p><strong>我们可以通过字典是不排序的，可以使用任意的值来作为键来编写一个小程序，用来记录朋友的生日</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">birthdays = &#123;<span class="string">&#x27;Alice&#x27;</span>: <span class="string">&#x27;Apr 1&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="string">&#x27;Dec 12&#x27;</span>, <span class="string">&#x27;Carol&#x27;</span>: <span class="string">&#x27;Mar 4&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Enter a name : (blank to quit)&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> birthdays:</span><br><span class="line">        <span class="built_in">print</span>(birthdays[name] + <span class="string">&#x27; is the birthday of &#x27;</span> + name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I do not have birthday information for &#x27;</span> + name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;What is their birthday?&#x27;</span>)</span><br><span class="line">        bday = <span class="built_in">input</span>()</span><br><span class="line">        birthdays[name] = bday <span class="comment">#将字典中没有的项 添加进字典中</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Birthday database updated&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(birthdays)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：这里创建了一个字典将他保存到名叫<code>birthday</code>的变量中，用来存放生日。用<code>in</code>关键字，可以查看输入的名字是否作为键存放在字典中。如果在字典中，我们可以用<code>[]</code>访问他们关联的值，如果不在我们可以用同样的方法添加他们。（程序终止时输入的所有数据就丢失了，因为我们没有将他们保存在硬盘文件中。）</li></ul><h3 id="1-2-keys-、values-和item-方法"><a href="#1-2-keys-、values-和item-方法" class="headerlink" title="1.2 keys()、values()和item()方法"></a>1.2 <code>keys()</code>、<code>values()</code>和<code>item()</code>方法</h3><p>​字典中有三个方法，他们将返回类似列表的值，分别对应字典的键、值、键-值对：<code>keys()</code>、<code>values()</code>和<code>item()</code>方法。这些方法返回的值不是真正的列表，他们不可被修改，没有<code>append()</code>方法，但这些数据类型 可以使用for循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> spam.values():</span><br><span class="line">    <span class="built_in">print</span>(v) <span class="comment"># 输出的结果为red和42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> spam.keys():</span><br><span class="line">    <span class="built_in">print</span>(k) <span class="comment"># 输出的结果为color和age</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> spam.items():</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># 输出的结果为(&#x27;color&#x27;, &#x27;red&#x27;)和(&#x27;age&#x27;, 42)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>解释</strong>：利用<code>keys()</code>、<code>values()</code>和<code>item()</code>方法，循环分别可以迭代键、值、键-值对。需要注意的是，<code>item()</code>方法返回的<code>dict_item</code>值包含的是键和值的元组，如果希望的到一个真正的列表，就把类似列表的值返回给list()函数，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(spam2.keys()) <span class="comment"># 输出的结果为dict_keys([&#x27;color&#x27;, &#x27;age&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(spam2.keys())) <span class="comment"># 输出的结果为[&#x27;color&#x27;, &#x27;age&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>list(sapm2.keys())</code>代码接收<code>keys()</code>函数返回的<code>dict_keys</code>值，并传给<code>list()</code>函数，然后返回一个列表，即<code>[&#39;color&#39;, &#39;age&#39;]</code>。</li></ul></li></ul><p>​也可以利用多重赋值技巧，在for循环中将键和值赋给不同的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam3 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> spam3.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Key: &#x27;</span> + k + <span class="string">&#x27; Value: &#x27;</span> + <span class="built_in">str</span>(v)) <span class="comment"># 输出的结果为Key: color Value: red和Key: age Value: 42</span></span><br></pre></td></tr></table></figure><h3 id="1-3-检查字典中是否存在键或值"><a href="#1-3-检查字典中是否存在键或值" class="headerlink" title="1.3 检查字典中是否存在键或值"></a>1.3 检查字典中是否存在键或值</h3><p>​<code>in</code>或者<code>in not</code>操作符可以检查值是否存在于列表中,也可以利用这些操作符检查某个键或值是否存在于字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> spam.keys()) <span class="comment"># 输出的结果为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Zophie&#x27;</span> <span class="keyword">in</span> spam.values()) <span class="comment"># 输出的结果为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;color&#x27;</span> <span class="keyword">in</span> spam.keys()) <span class="comment"># 输出的结果为False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;color&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> spam.keys()) <span class="comment"># 输出的结果为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;color&#x27;</span> <span class="keyword">in</span> spam) <span class="comment"># 输出的结果为False</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：请注意 在前面的例子中<code>‘color&#39; in spam</code>本质上是一个简写的版本 相当于<code>&#39;color&#39; in spam.keys()</code>，这种情况总是对的 如果要想检查一个值是否为字典中的键 就可以将关键字<code>in</code>或者<code>not in</code>作用于该字典本身。</li></ul><h3 id="1-4-get-方法"><a href="#1-4-get-方法" class="headerlink" title="1.4 get()方法"></a>1.4 <code>get()</code>方法</h3><p>​在访问一个值之前，检查该键是否在字典中，这很麻烦。这里我们用到<code>get()</code>方法，他有两个参数：1.要取得其值的键 2.当该键不存在时，返回备用的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">picnicItems = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;cups&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am bringing &#x27;</span> + <span class="built_in">str</span>(picnicItems.get(<span class="string">&#x27;cups&#x27;</span>, <span class="number">0</span>)) + <span class="string">&#x27; cups.&#x27;</span>) <span class="comment"># 输出的结果是I am bringing 2 cups</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am bringing &#x27;</span> + <span class="built_in">str</span>(picnicItems.get(<span class="string">&#x27;eggs&#x27;</span>, <span class="number">0</span>)) + <span class="string">&#x27; eggs.&#x27;</span>) <span class="comment"># 输出的结果是I am bringing 0 eggs</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：因为<code>picnicItems</code>字典中没有<code>&#39;eggs&#39;</code>键 所以<code>get()</code>方法返回的默认值是0，不使用<code>get()</code>方法就会报错。</li></ul><p>1.5 <code>setdefault()</code>方法</p><p>​我们常常需要为字典中的某一个键设置一个默认值，当该键没有任何值使用它时。代码看起来像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Pooka&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;color&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> spam:</span><br><span class="line">    spam[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br></pre></td></tr></table></figure><p>​<code>setdefualt()</code>方法提供了一种方式，可以在一行中完成这件事，该方法有两个参数：1.第一个参数是要检查的键（即查看该键是否在字典中）2.第二个参数是当该键不存在时需要设置的值。注意：如果该键的确存在，<code>setdefualt()</code>方法就会返回键的值，如果不存在则会返回<code>setdefualt()</code>方法的第二个参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Pooka&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(spam.setdefault(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;black&#x27;</span>)) <span class="comment"># 输出的结果为black</span></span><br><span class="line"><span class="built_in">print</span>(spam) <span class="comment"># 输出的结果为&#123;&#x27;name&#x27;: &#x27;Pooka&#x27;, &#x27;age&#x27;: 5, &#x27;color&#x27;: &#x27;black&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(spam.setdefault(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>)) <span class="comment"># 输出的结果为black</span></span><br><span class="line"><span class="built_in">print</span>(spam) <span class="comment"># 输出的结果为&#123;&#x27;name&#x27;: &#x27;Pooka&#x27;, &#x27;age&#x27;: 5, &#x27;color&#x27;: &#x27;black&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：当第一次调用<code>setdefualt()</code>方法时，<code>spam</code>变量中的字典变为<code>&#123;&#39;color&#39;: &#39;black&#39;, &#39;age&#39;: 5, &#39;name&#39;: &#39;Pooka&#39;&#125;</code>，该方法的返回值为<code>black</code>。</li><li><strong>解释</strong>：当第二次调用<code>setdefualt()</code>方法时，我们可以发现输出的结果没有变化，这是因为<code>spam</code>变量中的字典里已经有了名为<code>&#39;color&#39;</code>的键了。</li></ul><p>​<code>setdefualt()</code>方法是一个很好的快捷方式，可以确保有一个键的存在，下面这个程序可以计算一个字符串中每个字符出现的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&#x27;It was a bright cold day in April, and the clocks were striking thirteen.&#x27;</span> </span><br><span class="line">count = &#123;&#125; </span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message: </span><br><span class="line">    count.setdefault(character, <span class="number">0</span>)</span><br><span class="line">    count[character] = count[character] + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)    </span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>message</code>存放我们需要计算的字符串，<code>count = &#123;&#125;</code>这里我们初始化了一个空字典，用来存放字符及其出现次数，<code>for character in message:</code>这里我们遍历字符串（包括空格和标点符号），一次将字符赋值给变量<code>character</code>，<code>count.setdefault(character, 0)</code>这里我们调用<code>setdefualt()</code>方法：若 <code>character</code> 不在字典中，则添加该键并设置默认值 <code>0</code>，若已存在，则不改变其当前值。最后我们在使用<code>count[character] = count[character] + 1</code>将当前字符的计数值加1，更新到字典中。</li></ul><h2 id="2-美观的输出"><a href="#2-美观的输出" class="headerlink" title="2. 美观的输出"></a>2. 美观的输出</h2><p>​如果程序中导入了<code>pprint()</code>模块，就可以使用<code>pprint()</code>和<code>pformat()</code>函数，这些函数将为我们美观的输出一个字典，以我们上方的字符串计算程序为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">message = <span class="string">&#x27;It was a bright cold day in April, and the clocks were striking thirteen.&#x27;</span></span><br><span class="line">count = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line">    count.setdefault(character, <span class="number">0</span>)</span><br><span class="line">    count[character] = count[character] + <span class="number">1</span></span><br><span class="line">pprint.pprint(count)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pprint.pformat(count))</span><br></pre></td></tr></table></figure><p>​以上代码的输出结果如下（<code>pprint.pprint()</code>与<code>print(pprint.pformat())</code>是等价的，所以我们只展示一遍。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27; &#x27;: 13,</span><br><span class="line"> &#x27;,&#x27;: 1,</span><br><span class="line"> &#x27;.&#x27;: 1,</span><br><span class="line"> &#x27;A&#x27;: 1,</span><br><span class="line"> &#x27;I&#x27;: 1,</span><br><span class="line"> &#x27;a&#x27;: 4,</span><br><span class="line"> &#x27;b&#x27;: 1,</span><br><span class="line"> &#x27;c&#x27;: 3,</span><br><span class="line"> &#x27;d&#x27;: 3,</span><br><span class="line"> &#x27;e&#x27;: 5,</span><br><span class="line"> &#x27;g&#x27;: 2,</span><br><span class="line"> &#x27;h&#x27;: 3,</span><br><span class="line"> &#x27;i&#x27;: 6,</span><br><span class="line"> &#x27;k&#x27;: 2,</span><br><span class="line"> &#x27;l&#x27;: 3,</span><br><span class="line"> &#x27;n&#x27;: 4,</span><br><span class="line"> &#x27;o&#x27;: 2,</span><br><span class="line"> &#x27;p&#x27;: 1,</span><br><span class="line"> &#x27;r&#x27;: 5,</span><br><span class="line"> &#x27;s&#x27;: 3,</span><br><span class="line"> &#x27;t&#x27;: 6,</span><br><span class="line"> &#x27;w&#x27;: 2,</span><br><span class="line"> &#x27;y&#x27;: 1&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习--列表</title>
      <link href="/2025/03/26/Python%E5%AD%A6%E4%B9%A0-%E5%88%97%E8%A1%A8/"/>
      <url>/2025/03/26/Python%E5%AD%A6%E4%B9%A0-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><blockquote><p>[!NOTE]</p><p>以下内容部分摘录自<code>《Python编程快速上手——让繁琐的工作自动化（第二版）》</code>，并加入了一些自己的理解，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-列表基础"><a href="#1-列表基础" class="headerlink" title="1.列表基础"></a>1.列表基础</h2><ul><li><p><strong>列表的数据类型</strong>：列表是一个值，包含由多个值构成的序列，列表值看起来像这样：<code>[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]</code>。</p></li><li><p><strong>用索引取得列表中的单个值</strong>：</p><ul><li>假定列表<code>[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]</code>保存在名为<code>spam</code>的变量中 <code>spam[0]</code>将求值为<code>&#39;cat&#39;</code>，以此类推。</li><li>如果使用的索引超出了列表中值的个数python将给出<code>IndexError</code>错误。索引只能是整数，不能是浮点数 否则将导致<code>TypeError</code>错误。</li><li>列表也可以包含其他列表值，如：<code>spam = [[&#39;cat&#39;, &#39;bat&#39;], [10, 20, 30, 40, 50]]</code>，则：<code>spam[0] = [&#39;cat&#39;, &#39;bat&#39;]</code> 、<code>spam[0][1] = &#39;bat&#39;</code>、<code>spam[1][4] = 50</code>。</li></ul></li><li><p><strong>负数索引</strong>：虽然索引从0开始并向上增长，但也可以用负整数作为索引，整数值<code>-1</code>指的是列表中最后一个索引，整数值<code>-2</code>则是指列表中的倒是第二个索引，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[-<span class="number">1</span>]) <span class="comment"># 输出的结果为elephat</span></span><br><span class="line"><span class="built_in">print</span>(spam[-<span class="number">3</span>]) <span class="comment"># 输出的结果为bat</span></span><br></pre></td></tr></table></figure></li><li><p><strong>利用切片取得子列表</strong>：</p><ul><li><p>切片可以从列表中于取得多个值，所得的结果是一个新列表。像<code>spam[1:4]</code>这样的形式就是一个切片。</p></li><li><p>在一个切片中第一个整数是切片开始处的索引，第二个整数是切片结束处的索引，切片向上增长直至第二个引索的值，但不包括它，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># 输出结果为[&#x27;cat&#x27;, &#x27;bat&#x27;, &#x27;rat&#x27;, &#x27;elephant&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 输出结果为[&#x27;bat&#x27;, &#x27;rat&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">0</span>:-<span class="number">1</span>]) <span class="comment"># 输出结果为[&#x27;cat&#x27;, &#x27;bat&#x27;, &#x27;rat&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>用<code>len（）</code>函数取得列表的长度</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;moose&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(spam)) <span class="comment"># 输出结果为3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用索引改变列表中的值</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line">spam[<span class="number">1</span>] = <span class="string">&#x27;aardvark&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(spam) <span class="comment"># 输出的结果为[&#x27;cat&#x27;, &#x27;aardvark&#x27;, &#x27;rat&#x27;, &#x27;elephant&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表连接和列表复制</strong>：</p><ul><li>连接：<code>[1, 2, 3] + [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;] = [1, 2, 3, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></li><li>复制：<code>[&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;] * 3 = [&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;]</code></li></ul></li><li><p><strong>用del语句从列表删除值</strong>：</p><ul><li><p><code>del</code>语句将删除列表中索引的值，列表中被删除值后面的所有值,都将向前移动一个索引，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(spam) <span class="comment"># 输出的结果为[&#x27;cat&#x27;, &#x27;bat&#x27;, &#x27;elephant&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-使用列表"><a href="#2-使用列表" class="headerlink" title="2.使用列表"></a>2.使用列表</h2><p>在我们第一次开始编程时，可能会为了保存一组很类似的值，而创建多个不同的变量名。而列表的出现，可以让用户不再使用多个类似的变量。例如要输入你自己所有猫的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">catNames = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Enter the name of cat &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(catNames) + <span class="number">1</span>) + <span class="string">&#x27; (Or enter nothing to stop.):&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    catNames = catNames + [name]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The cat names are:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> catNames:</span><br><span class="line">    <span class="built_in">print</span>(name)    </span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：首先我们定义了一个名为<code>catNames</code>的空列表用于存储后续输入的猫的名字，之后我们调用<code>while</code>提示用户输入第<code>N</code>只猫的名字，<code>N</code>是当前列表长度加1（如列表中有2个名字，提示输入第3只猫）。接着使用**<code>catNames = catNames + [name]</code>**将用户输入的名字<code>name</code>添加到列表<code>catNames</code>中。最后使用<code>for</code>循环遍历整个列表逐个打印猫的名字。</li></ul><h3 id="2-1-列表用于循环"><a href="#2-1-列表用于循环" class="headerlink" title="2.1.列表用于循环"></a>2.1.列表用于循环</h3><ul><li>循环可以让一段代码执行一定次数，从技术上讲循环是针对一个序列或列表中的每个值，重复的执行代码块，例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">CYX = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> CYX:</span><br><span class="line">    <span class="built_in">print</span>(j)</span><br></pre></td></tr></table></figure><ul><li><p><strong>解释</strong>：上面两个<code>print</code>所打印的是相同的是因为range（4）返回的是类似列表的值。</p></li><li><p><strong>一个常见的python技巧</strong>：在<code>for</code>循环中使用<code>range(len(somelist))</code>来迭代列表的每一个索引。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">supplies = [<span class="string">&#x27;pen&#x27;</span>, <span class="string">&#x27;staplers&#x27;</span>, <span class="string">&#x27;flame-throwers&#x27;</span>, <span class="string">&#x27;binders&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(supplies)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Index &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; in supplies is: &#x27;</span> + supplies[i])</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-in和not-in操作符"><a href="#2-2-in和not-in操作符" class="headerlink" title="2.2.in和not in操作符"></a>2.2.<code>in</code>和<code>not in</code>操作符</h3><ul><li><p><code>in</code>和<code>in not</code>操作符可以确定一个值是否在列表中。</p></li><li><p><code>in</code>和<code>in not</code>在表达式中用于连接两个值：1.要在列表中查找的值 2.待查找的列表（这些表达式将求值为<code>bool</code>值）。例如，下面的程序让用户输入一个宠物名字，然后检查该名字是否在宠物列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myPents = [<span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;Pooka&#x27;</span>, <span class="string">&#x27;Fat-tail&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Enter a pet name:&#x27;</span>)</span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> myPents:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I do not have a pet named &#x27;</span> + name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&#x27; is my pet.&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-多重赋值技巧"><a href="#2-3-多重赋值技巧" class="headerlink" title="2.3.多重赋值技巧"></a>2.3.多重赋值技巧</h3><ul><li><p>多重赋值技巧是一种快捷方式，让你在一行代码中用列表中的值为多个变量赋值。像我们以往的赋值方法就显得有些繁琐，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat = [<span class="string">&#x27;fat&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;loud&#x27;</span>]</span><br><span class="line">size = cat[<span class="number">0</span>]</span><br><span class="line">color = cat[<span class="number">1</span>]</span><br><span class="line">disposition = cat [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(size, color, disposition)</span><br></pre></td></tr></table></figure></li><li><p>这样的方法需要我们一次输入变量名和对应的列表索引，很麻烦。不如像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat = [<span class="string">&#x27;fat&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;loud&#x27;</span>]</span><br><span class="line">size,color,disposition = cat</span><br><span class="line"><span class="built_in">print</span>(size, color, disposition)</span><br></pre></td></tr></table></figure></li><li><p>两串代码输出的结果是一样的，而下面的代码更加简洁，但需要注意的是，变量的数目和列表的长度必须严格相等，否则python将给出<code>ValueError</code>错误。</p></li></ul><h3 id="2-4-enumerate-函数与列表一起使用"><a href="#2-4-enumerate-函数与列表一起使用" class="headerlink" title="2.4.enumerate()函数与列表一起使用"></a>2.4.<code>enumerate()</code>函数与列表一起使用</h3><ul><li><p>如果在<code>for</code>循环中不想用<code>range(len(someList))</code>技术来获取列表中各表项，还可以调用<code>enumerate()</code>函数。</p></li><li><p>在循环的每次迭代中<code>enumerate()</code>函数将返回两个值：1.表中表项的索引 2.列表中的表项本身。例如，在列表用于循环的代码中使用<code>enumerate()</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">supplies = [<span class="string">&#x27;pen&#x27;</span>, <span class="string">&#x27;staplers&#x27;</span>, <span class="string">&#x27;flame-throwers&#x27;</span>, <span class="string">&#x27;binders&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(supplies):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Index &#x27;</span> + <span class="built_in">str</span>(index) + <span class="string">&#x27; in supplies is: &#x27;</span> + item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 以下是输出的结果</span></span><br><span class="line"><span class="comment"># Index 0 in supplies is: pen</span></span><br><span class="line"><span class="comment"># Index 1 in supplies is: staplers</span></span><br><span class="line"><span class="comment"># Index 2 in supplies is: flame-throwers</span></span><br><span class="line"><span class="comment"># Index 3 in supplies is: binders</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-random-choice-函数和random-shuffle-函数和列表共同使用"><a href="#2-5-random-choice-函数和random-shuffle-函数和列表共同使用" class="headerlink" title="2.5.random.choice()函数和random.shuffle()函数和列表共同使用"></a>2.5.<code>random.choice()</code>函数和<code>random.shuffle()</code>函数和列表共同使用</h3><ul><li><p><strong><code>random.choice()</code>函数</strong>：使用<code>random.choice()</code>函数，将从列表里随即返回一个表项，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">pets = [<span class="string">&#x27;Dogs&#x27;</span>, <span class="string">&#x27;Cats&#x27;</span>, <span class="string">&#x27;Moose&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(random.choice(pets))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码将输出列表pets中的任意一个表项</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>random.shuffle()</code>函数</strong>：使用<code>random.shuffle()</code>函数，将对列表中的表项重新排序，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">people = [<span class="string">&#x27;GSY&#x27;</span>, <span class="string">&#x27;CYX&#x27;</span>, <span class="string">&#x27;ZZZ&#x27;</span>, <span class="string">&#x27;XXX&#x27;</span>]</span><br><span class="line">random.shuffle(people)</span><br><span class="line"><span class="built_in">print</span>(people)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码会将列表people中的表项重新排列并输出</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-增强的赋值操作"><a href="#3-增强的赋值操作" class="headerlink" title="3.增强的赋值操作"></a>3.增强的赋值操作</h2><ul><li><p>在对变量赋值时，常常会用到变量本身，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spam = <span class="number">42</span></span><br><span class="line">spam = spam + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line">abcd = <span class="number">42</span></span><br><span class="line">abcd += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(abcd)</span><br></pre></td></tr></table></figure><ul><li><p><strong>解释</strong>：</p></li><li><p>两串代码运行的结果一样，而<code>+=</code>就是增强操作符，增强操作符还有：</p><table><thead><tr><th align="center">增强操作符语句</th><th align="center">等价操作符语句</th></tr></thead><tbody><tr><td align="center">spam +&#x3D; 1</td><td align="center">spam &#x3D; spam + 1</td></tr><tr><td align="center">spam -&#x3D; 1</td><td align="center">spam &#x3D; spam - 1</td></tr><tr><td align="center">spam *&#x3D; 1</td><td align="center">spam &#x3D; spam * 1</td></tr><tr><td align="center">spam &#x2F;&#x3D; 1</td><td align="center">spam &#x3D; spam &#x2F; 1</td></tr><tr><td align="center">spam %&#x3D; 1</td><td align="center">spam &#x3D; spam % 1</td></tr></tbody></table></li><li><p><code>+=</code>操作符可以完成字符串和列表的连接，<code>*=</code>操作符可以完成字符串和列表的复制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CYX = <span class="string">&#x27;Hello,&#x27;</span></span><br><span class="line">CYX += <span class="string">&#x27;world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(oppo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的结果为：Hello,world!</span></span><br><span class="line"></span><br><span class="line">GSY = [<span class="string">&#x27;Zophie&#x27;</span>]</span><br><span class="line">GSY *= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(vivo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的结果为：[&#x27;Zophie&#x27;, &#x27;Zophie&#x27;, &#x27;Zophie&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h2><ul><li>方法和函数是一回事，只是它在一个值上进行调用，例如：一个列表值存储在<code>spam</code>变量中，你可以在这个列表上调用<code>index()</code>列表方法，就像<code>spam.index(&#39;hello&#39;)</code>。</li><li>方法跟在要调用的值后面，以一个圆点分隔。每种数据类型都有它自己的一组方法，例如：列表数据类型有一些有用的方法，用来查找 、添加、删除或者修改列表中的值。</li></ul><h3 id="4-1-用index-方法在列表中查找值"><a href="#4-1-用index-方法在列表中查找值" class="headerlink" title="4.1.用index()方法在列表中查找值"></a>4.1.用<code>index()</code>方法在列表中查找值</h3><ul><li><p>列表值有一个<code>index()</code>方法，可以传入一个值，如果该值存在于列表中，就返回他的索引，如果该值不在列表中，就会报错<code>ValueError</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;howdy&#x27;</span>, <span class="string">&#x27;heyas&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(spam.index(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment"># 输出的结果为0</span></span><br><span class="line"><span class="built_in">print</span>(spam.index(<span class="string">&#x27;heyas&#x27;</span>)) <span class="comment"># 输出的结果为3</span></span><br></pre></td></tr></table></figure></li><li><p>如果列表中存在重复的值，就返回它第一次出现的引索，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oppo = [<span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;Pooka&#x27;</span>, <span class="string">&#x27;Fat-tail&#x27;</span>, <span class="string">&#x27;Pooka&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(oppo.index(<span class="string">&#x27;Pooka&#x27;</span>)) <span class="comment"># 输出的结果为1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-用append-方法和insert-方法在列表中添加值"><a href="#4-2-用append-方法和insert-方法在列表中添加值" class="headerlink" title="4.2.用append()方法和insert()方法在列表中添加值"></a>4.2.用<code>append()</code>方法和<code>insert()</code>方法在列表中添加值</h3><ul><li><p><code>append()</code>方法可将参数添加到列表末尾，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>]</span><br><span class="line">spam.append(<span class="string">&#x27;moose&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是这串代码的输出结果</span></span><br><span class="line"><span class="comment"># [&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;bat&#x27;, &#x27;moose&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>insert()</code>方法可以在列表任意索引出插入一个值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>]</span><br><span class="line">spam.insert(<span class="number">1</span>, <span class="string">&#x27;Chicken&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是这串代码的输出结果</span></span><br><span class="line"><span class="comment"># [&#x27;cat&#x27;, &#x27;Chicken&#x27;, &#x27;dog&#x27;, &#x27;bat&#x27;, &#x27;moose&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>insert()</code>方法的第一个参数是新值的索引，第二个参数是要加入的新值。</li></ul></li><li><p><strong>注意</strong>：</p><ol><li><code>append()</code>方法与<code>insert()</code>方法都不会将<code>spam</code>的新值作为其返回值 （事实上他们两的返回值都为<code>None</code>），所以直接<code>print(vivo.append(&#39;moose&#39;))</code>之类的表述，输出的值会为<code>None</code>。</li><li>方法属于单个的数据类型，只能在列表上调用，而不能在字符串或者整型等其它值上调用。</li></ol></li></ul><h3 id="4-3-用remove-方法从列表中删除值"><a href="#4-3-用remove-方法从列表中删除值" class="headerlink" title="4.3.用remove()方法从列表中删除值"></a>4.3.用<code>remove()</code>方法从列表中删除值</h3><ul><li><p>给<code>remove()</code>方法传入一个值，它将从调用该方法的列表中删除这个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line">spam.remove(<span class="string">&#x27;bat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [&#x27;cat&#x27;, &#x27;rat&#x27;, &#x27;elephant&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：如果试图删除列表中不存在的值时，就会发生<code>ValueError</code>错误。</li></ul></li><li><p>如果该列表中存在出现多次的值，只有第一次会被删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam =[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hat&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line">spam.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [&#x27;bat&#x27;, &#x27;rat&#x27;, &#x27;cat&#x27;, &#x27;hat&#x27;, &#x27;cat&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-用sort-方法将列表中的值排序"><a href="#4-4-用sort-方法将列表中的值排序" class="headerlink" title="4.4.用sort()方法将列表中的值排序"></a>4.4.用<code>sort()</code>方法将列表中的值排序</h3><ul><li><p>包含数值的列表或字符串列表能用<code>sort()</code>方法排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MosHSasA = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3.14</span>, <span class="number">1</span>, -<span class="number">7</span>]</span><br><span class="line">MosHSasA.sort()</span><br><span class="line"><span class="built_in">print</span>(MosHSasA)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [-7, 1, 2, 3.14, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>也可以指定<code>reverse</code>关键字参数为<code>True</code>，让<code>sort()</code>方法按照逆序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MosHSasA = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3.14</span>, <span class="number">1</span>, -<span class="number">7</span>]</span><br><span class="line">MosHSasA.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(MosHSasA)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [5, 3.14, 2, 1, -7]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>关于<code>sort()</code>方法应该注意三件事</strong>：</p><ol><li><p><code>sort()</code>方法就地的对列表排序不要写出<code>spam = spam.sort()</code>这样的代码。</p></li><li><p>不能对既有数字又有字符串值的列表排序，这样会发生<code>TypeError</code>错误。</p></li><li><p><code>sort()</code>方法对字符串排序时，使用<code>ASCII码</code>排序，而不是实际的字典排序，这意味着大写字母在小写字母之前，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;ants&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;badgers&#x27;</span>, <span class="string">&#x27;Carol&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>]</span><br><span class="line">spam.sort()</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Carol&#x27;, &#x27;ants&#x27;, &#x27;badgers&#x27;, &#x27;cats&#x27;]</span></span><br></pre></td></tr></table></figure><p>如果要按照普通的字典顺序来排序，就在调用<code>sort()</code>方法时，将关键字参数<code>key</code>设置成<code>str.lower</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line">spam.sort(key=<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;A&#x27;, &#x27;z&#x27;, &#x27;Z&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="4-5-使用reverse-方法反转列表中的值"><a href="#4-5-使用reverse-方法反转列表中的值" class="headerlink" title="4.5.使用reverse()方法反转列表中的值"></a>4.5.使用<code>reverse()</code>方法反转列表中的值</h3><ul><li><p>如果想要快速反转列表中的项目顺序，可以调用<code>reverse()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;moose&#x27;</span>]</span><br><span class="line">spam.reverse()</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码输出的结果如下</span></span><br><span class="line"><span class="comment"># [&#x27;moose&#x27;, &#x27;dog&#x27;, &#x27;cat&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：和<code>sort()</code>方法一样<code>reverse()</code>方法也不返回列表，这就是为什么要写成<code>spam.reverse()</code>而不是<code>spam = spam.reserve()</code>。</p></li></ul><h2 id="5-序列数据类型"><a href="#5-序列数据类型" class="headerlink" title="5.序列数据类型"></a>5.序列数据类型</h2><ul><li><p>列表并不是唯一表示序列值的数据类型，如果将字符串考虑为单个文本字符的列表，那么字符串和列表实际上是相似的。python序列数据类型包括：列表、字符串、由<code>range()</code>返回的范围对象、以及元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Zophie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Zo&#x27;</span> <span class="keyword">in</span> name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z&#x27;</span> <span class="keyword">in</span> name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;* * * &#x27;</span> + i + <span class="string">&#x27; * * *&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上代码的输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Z</span><br><span class="line">i</span><br><span class="line">Zoph</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">* * * Z * * *</span><br><span class="line">* * * o * * *</span><br><span class="line">* * * p * * *</span><br><span class="line">* * * h * * *</span><br><span class="line">* * * i * * *</span><br><span class="line">* * * e * * *</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：这表示对于列表的许多操作，也可以作用于字符串和序列数据类型的其他值。</p></li></ul><h3 id="5-1-可变和不可变数据类型"><a href="#5-1-可变和不可变数据类型" class="headerlink" title="5.1.可变和不可变数据类型"></a>5.1.可变和不可变数据类型</h3><ul><li><p>列表和字符串在一个重要方面是不同的：列表是可变的，它可以添加删除或改变；字符串是不可变的，它不能被更改。尝试对一个字符串重新赋值将导致<code>TyperError</code>错误，例如这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Zophie a cat&#x27;</span></span><br><span class="line">name[<span class="number">7</span>] = <span class="string">&#x27;the&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>改变一个字符串的正确方式是使用：切片和连接来构造一个新的字符串，从旧的字符串里复制一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Zophie a cat&#x27;</span></span><br><span class="line">newName = name[<span class="number">0</span>:<span class="number">7</span>] + <span class="string">&#x27;the&#x27;</span> + name[<span class="number">8</span>:<span class="number">12</span>]</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(newName) <span class="comment"># 输出的结果是Zophie the cat</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>name[0:7]</code>将字符串第0个字符到第7个（但不包含第7个）字符保留，<code>name[8:12]</code>类似，之后得到的替换字符串，但注意我们原来的字符串并没有改变。</li></ul></li><li><p>尽管列表值是可变的，但下面代码中的第二行并没有修改<code>eggs</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eggs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">eggs = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(eggs) <span class="comment"># 输出的结果为[4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>解释</strong>：这里<code>eggs</code>中的列表值并没有改变，而是整个新的不同的列表值复写了旧的列表值。</p></li><li><p>如果你确实希望修改<code>eggs</code>中原来的列表，让它包含<code>[4， 5， 6]</code>就要这样做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apple = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> apple[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> apple[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">del</span> apple[<span class="number">0</span>]</span><br><span class="line">apple.append(<span class="number">4</span>)</span><br><span class="line">apple.append(<span class="number">5</span>)</span><br><span class="line">apple.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(apple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的结果为[4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：这种情况下<code>eggs</code>最后的列表值与它开始的列表值是一样的，只是这个列表被改变了而不是被复写了。</li></ul></li></ul></li></ul><h3 id="5-2-元组数据类型"><a href="#5-2-元组数据类型" class="headerlink" title="5.2.元组数据类型"></a>5.2.元组数据类型</h3><ul><li><p>除了两个方面元组数据类型几乎与列表数据类型一样：</p><ol><li><p>第一个区别在于，元组输入时使用的括号是<code>( )</code>而不是<code>[ ]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eggs = (<span class="string">&#x27;hello&#x27;</span>, <span class="number">42</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">print</span>(eggs[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(eggs[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(eggs))</span><br></pre></td></tr></table></figure><p>以下是这串代码的输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">(42, 0.5)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>另一个区别在于，元组像字符串一样是不可变的，元组不能让他的值被修改、添加或删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple = (<span class="string">&#x27;hello&#x27;</span>, <span class="number">42</span>, <span class="number">0.5</span>)</span><br><span class="line">apple[<span class="number">1</span>] = <span class="number">99</span></span><br></pre></td></tr></table></figure><p>例如，输入上面的代码python会报错<code>TypeError</code>。</p></li></ol></li><li><p>如果元组只有一个值，可以在括号内该值的后面跟上一个逗号来表明这种情况，否侧python会认为你只是在一个普通的括号内输入了一个值，逗号告诉python这是一个元组，例如，现在用type函数来看看他们各自的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>((<span class="string">&#x27;hello&#x27;</span>,))) <span class="comment"># 输出的结果为&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>((<span class="string">&#x27;hello&#x27;</span>))) <span class="comment"># 输出的结果为&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-用list-和tuple-函数来转换类型"><a href="#5-3-用list-和tuple-函数来转换类型" class="headerlink" title="5.3.用list()和tuple()函数来转换类型"></a>5.3.用list()和tuple()函数来转换类型</h3><ul><li><p>正如<code>str(42)</code>将返回<code>&#39;42&#39; </code>即整数42的字符串表示形式一样，函数<code>list()</code>和<code>tuple()</code>将传递给它们的值返回成的列表和元组形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>([<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>((<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><p>上面代码的输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;cat&#x27;, &#x27;dog&#x27;, 5)</span><br><span class="line">[&#x27;cat&#x27;, &#x27;dog&#x27;, 5]</span><br><span class="line">[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><ul><li><p>对于变量保存字符串和整数值这种解释其实是简化了python的实际操作，变量的储存其实是对计算机内存位置的引用，这些位置储存了这些值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spam = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">cheese = spam</span><br><span class="line">cheese[<span class="number">1</span>] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"><span class="built_in">print</span>(cheese)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码的输出结果如下</span></span><br><span class="line"><span class="comment"># [0, &#x27;hello&#x27;, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># [0, &#x27;hello&#x27;, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：你将一个列表赋给了变量<code>spam</code>，但是在下一行只是将<code>spam</code>变量中的列表引用复制到<code>cheese</code>变量，而不是列表本身。这意味着储存在<code>spam</code>和<code>cheese</code>中的值现在指向了同一个列表，列表的本身实际从未复制，所以当你修改<code>cheese</code>变量的第一个元素的同时，也修改了<code>spam</code>变量所指向的同一个列表。</li></ul></li></ul><h3 id="6-1-标识和id-函数"><a href="#6-1-标识和id-函数" class="headerlink" title="6.1.标识和id()函数"></a>6.1.标识和<code>id()</code>函数</h3><ul><li><p>关于刚刚所提到的关于列表的例子或许有一些难以理解，比如像列表这样的行为为什么不会出现在整数或者字符串这些不可变的值上。其实我们可以通过id()函数来解释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="string">&#x27;Howdy&#x27;</span>)) <span class="comment"># 输出的结果为2269208642992（每次运行代码内存字节都会不同）</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：当python运行<code>id(&#39;Howdy&#39;)</code>时它将在计算机的内存中创建<code>&#39;Howdy&#39;</code>字符串，返回存储字符串的数字内存地址，python根据当时计算机上空闲的内存字节来选择此地址，每次运行代码，内存字节都会不同。</li></ul></li><li><p>像所有字符串一样，<code>&#39;Howdy&#39;</code>是不可变的，无法更改。如果更改变量中的字符串，就会在内存中的其他位置创建新的字符串对象，并且该变量引用这个新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bacon = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bacon)) <span class="comment"># 输出的结果为2269199734896</span></span><br><span class="line">bacon += <span class="string">&#x27; world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bacon)) <span class="comment"># 输出的结果为2269208640560</span></span><br></pre></td></tr></table></figure></li><li><p>可以修改列表，因为他是可变对象。<code>append()</code>方法不会创建新的列表，他更改现有的列表对象，称之为就地修改对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eggs = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(eggs)) <span class="comment"># 输出的结果为2342254802752</span></span><br><span class="line">eggs.append(<span class="string">&#x27;moose&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(eggs)) <span class="comment"># 输出的结果为2342254802752</span></span><br><span class="line">eggs = [<span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(eggs)) <span class="comment"># 输出的结果为2342254804352</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：如果两个变量引用同一个列表（如上面所举例的<code>spam</code>和<code>cheese</code>变量），并且列表本身发生了变化，那么这两个变量都会受到影响。<code>append()</code>、<code>extend()</code>、<code>remove()</code>、<code>sort()</code>、<code>reverse()</code>和其他列表方法会就地改变其列表。</li></ul></li></ul><h3 id="6-2-传递引用"><a href="#6-2-传递引用" class="headerlink" title="6.2.传递引用"></a>6.2.传递引用</h3><ul><li><p>要理解参数如何传递给函数，引用就特别重要。当函数被调用时，参数的值被复制给变元。对于列表、字典， 这意味着变元得到的是引用的复制，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eggs</span>(<span class="params">someParameter</span>):</span><br><span class="line">    someParameter.append(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">spam = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">eggs(spam)</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码的输出结果如下</span></span><br><span class="line"><span class="comment"># [1, 2, 3, &#x27;Hello&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：当<code>eggs()</code>函数被调用时没有使用返回值来为<code>spam</code>变量赋新值，相反他直接就地修改了该列表。尽管<code>spam</code>和<code>someParameter</code>变量包含了不同的引用，但他们都指向相同的列表。</li></ul></li></ul><h3 id="6-3-copy模块的copy-和deepcopy-函数"><a href="#6-3-copy模块的copy-和deepcopy-函数" class="headerlink" title="6.3.copy模块的copy()和deepcopy()函数"></a>6.3.<code>copy</code>模块的<code>copy()</code>和<code>deepcopy()</code>函数</h3><ul><li><p>在处理列表和字典时尽管传递引用是最方便的方法，但是如果函数修改了传入的列表或字典，我们并不希望这些变动影响到原来的字典和列表，此时就可以运用<code>copy()</code>和<code>deepcopy()</code>函数。</p><ol><li><p><code>copy.copy()</code>函数可以用来复制列表或字典这样的可变值，而不只是复制引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">spam = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(spam)) <span class="comment"># 输出的结果为1773092600256</span></span><br><span class="line"></span><br><span class="line">cheese= copy.copy(spam)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(cheese)) <span class="comment"># 输出的结果为1773092601216</span></span><br><span class="line"></span><br><span class="line">cheese[<span class="number">1</span>] = <span class="number">42</span></span><br><span class="line"><span class="built_in">print</span>(spam) <span class="comment"># 输出的结果为[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(cheese) <span class="comment"># 输出的结果为[&#x27;A&#x27;, 42, &#x27;C&#x27;, &#x27;D&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：现在<code>cheese</code>和<code>spam</code>变量指向独立的列表，这就是为什么将<code>cheese[1]</code>赋值成<code>42</code>时，<code>spam</code>中的列表没有改变。</li></ul></li><li><p>如果要复制的列表中包含了列表，就使用<code>copy.deepcopy()</code>函数来代替，这个函数将同时复制它们内部的列表。</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习--函数</title>
      <link href="/2025/03/24/Python%E5%AD%A6%E4%B9%A0--%E5%87%BD%E6%95%B0/"/>
      <url>/2025/03/24/Python%E5%AD%A6%E4%B9%A0--%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>[!NOTE]</p><p>以下内容部分摘录自<code>《Python编程快速上手——让繁琐的工作自动化（第二版）》</code>，并加入了一些自己的理解，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-函数定义与调用"><a href="#1-函数定义与调用" class="headerlink" title="1. 函数定义与调用"></a>1. 函数定义与调用</h2><ul><li><p><strong>语法</strong>：使用 <code>def</code> 关键字定义函数。</p></li><li><p><strong>参数</strong>：函数可以接收<code>参数（变元）</code>，<code>参数</code>在函数内部作为局部变量使用。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, &#x27;</span> + name)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&#x27;GSY&#x27;</span>)  <span class="comment"># 输出：Hello, GSY</span></span><br><span class="line">hello(<span class="string">&#x27;CYX&#x27;</span>)  <span class="comment"># 输出：Hello, CYX</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>解释</strong>：像<code>print()</code>或者<code> len()</code> 函数括号中经常带有一些值，他们称之为函数的<code>参数</code>，也可以自己定义接收到参数的函数。</p><ul><li>如同上述例子一样：<code>hello函数</code>中有一个名叫<code>name</code>的变元，当函数被调用时，<code>参数</code>就存放在其中（保存在变元中的值，在函数返回后就消失了，例如：<code>在hello(&#39;CYX&#39;)</code>之后再<code>print(name)</code>那么程序就会报错。)</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sayHello</span>(<span class="params">abc</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, &#x27;</span> + abc)</span><br><span class="line">sayHello(<span class="string">&#x27;AI&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：<code>def sayHello(abc)</code>就是定义了一个这样的函数，而<code>sayHello(&#39;AI&#39;)</code>行则是调用了这样的函数,这样的函数调用也将字符串里的<code>AI</code> 传递给该函数，传递给函数的值称为<code>参数</code>，这里的<code>abc</code>就是接受<code>参数AI </code>的局部变量，也叫做变元。</p></li></ul><h2 id="2-参数与返回值"><a href="#2-参数与返回值" class="headerlink" title="2. 参数与返回值"></a>2. 参数与返回值</h2><ul><li><p><strong>返回值</strong>：使用 <code>return</code> 语句指定函数的返回值。若无 <code>return</code>，默认返回 <code>None</code>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAnswer</span>(<span class="params">answerNumber</span>):</span><br><span class="line">    <span class="keyword">if</span> answerNumber == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;It is certain&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;It is decidedly so&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Yes&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Replay hazy try again&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Ask again later&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Concentrate and ask again&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;My replay is no&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Outlook not so good&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Very doubtful&#x27;</span></span><br><span class="line">   </span><br><span class="line">r = random.randint(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">fortune = getAnswer(r)</span><br><span class="line"><span class="built_in">print</span>(fortune)  <span class="comment"># 随机输出结果</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>解释</strong>：这是一个随机返回一句话的例子，我们首先定义了一个函数<code>getAnswer()</code>，之后又生成了一个随机变元<code>r</code>它通过<code>random</code>函数在1-9之间随机一个数字，之后再通过对应我们定义函数中对应的部分来返回相应的句子，一般来说函数调用求值的结果称为函数的<code>返回值</code>，用<code>def语句</code>创建函数时可以用<code>return语句</code>指定应该返回什么值，<code>return语句</code>包含 :<ul><li>1.<code>return</code>关键字 </li><li>2.函数应该返回的值或者表达式（如果return语句中是有了表达式那么返回值就是求值的结果）</li></ul></li></ul><h2 id="3-关键字参数与-None-值"><a href="#3-关键字参数与-None-值" class="headerlink" title="3. 关键字参数与 None 值"></a>3. 关键字参数与 None 值</h2><ul><li><p><strong>None 值</strong>：无显式返回值的函数默认返回 <code>None</code>。例如：<code>print()</code>函数,它直接在屏幕上显示文本，但不需要返回任何值，既然所有的函数调用都需要一个返回值，那么它的返回值就是None，而对于所有没有<code>return语句</code>的函数和不带值的<code>return语句</code>他们的返回值都默认是<code>None</code></p></li><li><p><strong>关键字参数</strong>：通过参数名指定值，常用于可选参数。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 输出：Hello World（不换行）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;World&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>, <span class="string">&#x27;mice&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 输出：cats,dogs,mice</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>解释</strong>：上面所展示的就是<code>print()</code>函数的两个可选的变元<code>end</code>和<code>sep</code>：<ul><li><code>sep</code>：指定参数间的分隔符，即：在参数之间输入什么来将他们分隔开（默认空格）。</li><li><code>end</code>：指定末尾字符，即：指定在参数末尾输出什么（默认换行）。</li></ul></li></ul><h2 id="4-调用栈"><a href="#4-调用栈" class="headerlink" title="4. 调用栈"></a>4. 调用栈</h2><ul><li><p><strong>调用栈</strong>：Python 通过栈结构管理函数调用，每次调用函数时创建帧对象，返回时销毁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Alice</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice starts&#x27;</span>)</span><br><span class="line">    Bob()</span><br><span class="line">    Carol()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice returns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Bob</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob starts&#x27;</span>)</span><br><span class="line">    Carol()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob returns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Carol</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Carol starts&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Carol returns&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Alice()</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：调用栈是Python记住每个函数调用后在那里返回执行的方式，调用栈不是存储在程序的变量中而是由python在后台处理它，程序调用一个函数时python在调用栈的顶部创建一个<code>帧对象</code>，<code>帧对象</code>保存了再出函数调用的行号，使得python可以记住返回的位置，如果进行了另一个函数的调用python会将另一个<code>帧对象</code>放在调用栈中，且在前一个帧对象之上，当函数调用返回时，python从栈顶部删除一个对象并将执行栈转移至保存在其中的行号。</p><p><strong>注意</strong> ：帧对象始终是从栈顶部添加和删除的。</p></li><li><p><strong>执行流程</strong>：</p><ol><li><code>Alice()</code> 调用 <code>Bob()</code> 和 <code>Carol()</code>。</li><li><code>Bob()</code> 调用 <code>Carol()</code>。</li><li>函数返回时按栈顺序退出。</li></ol></li><li><p><strong>代码输出</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Alice starts</span><br><span class="line">Bob starts</span><br><span class="line">Carol starts</span><br><span class="line">Carol returns</span><br><span class="line">Bob returns</span><br><span class="line">Carol starts</span><br><span class="line">Carol returns</span><br><span class="line">Alice returns</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-作用域"><a href="#5-作用域" class="headerlink" title="5. 作用域"></a>5. 作用域</h2><ul><li><p><strong>全局作用域</strong>：函数外定义的变量，处于全局作用域中的变量称为全局变量。</p></li><li><p><strong>局部作用域</strong>：函数内定义的变量，函数返回后销毁，处于局部作用域中的变量被称为局部变量。</p></li><li><p><strong>规则</strong>：</p><ol><li><p><strong>全局作用域不能访问局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>():</span><br><span class="line">    eggs = <span class="number">31337</span></span><br><span class="line">spam()</span><br><span class="line"><span class="built_in">print</span>(eggs)</span><br><span class="line"><span class="comment"># 注意：这是错误的代码！！！</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：发生错误是因为<code>eggs</code>变量只属于<code>spam()</code>调用所创建的局部作用域，在程序执行从<code>spam</code>返回后,该局部作用域就被销毁了。</li></ul></li><li><p><strong>不同函数的局部作用域相互独立</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>():</span><br><span class="line">    eggs = <span class="number">99</span></span><br><span class="line">    bacon()</span><br><span class="line">    <span class="built_in">print</span>(eggs)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bacon</span>():</span><br><span class="line">    ham = <span class="number">101</span></span><br><span class="line">    eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">spam()</span><br><span class="line"><span class="comment"># 这串代码的输出结果为99</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>:这串代码第一个局部作用域来自于<code>spam函数</code>的调用，其中<code>eggs</code>的值为99，然后<code>bacon函数</code>被调用，创建了第二个局部作用域，在新的作用域中<code>ham</code>被赋值为101，<code>eggs</code>赋值为0,当<code>bacon函数</code>返回时，这次调用的局部作用域被销毁，程序执行在<code>spam函数</code>中继续输出<code>eggs</code>的值，所以<code>eggs</code>值为99被输出。</li></ul></li><li><p><strong>局部作用域可读取全局变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>():</span><br><span class="line">    <span class="built_in">print</span>(eggs)</span><br><span class="line">eggs = <span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line"><span class="built_in">print</span>(eggs)</span><br></pre></td></tr></table></figure><p><strong>代码输出</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">42</span><br><span class="line">42</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：首先我们调用的<code>spam()</code>中的<code>print(eggs)</code>处于函数<code>spam()</code>的局部作用域中，却可以输出我们在全局作用域中定义的<code>eggs</code>的值，这说明局部作用域可读取全局变量。</li></ul></li><li><p><strong>同名变量在不同作用域互不影响</strong></p></li></ol></li></ul><h2 id="6-global-语句"><a href="#6-global-语句" class="headerlink" title="6. global 语句"></a>6. global 语句</h2><ul><li><p><strong>作用</strong>：在函数内修改全局变量。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eggs = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>():</span><br><span class="line">    <span class="keyword">global</span> eggs</span><br><span class="line">    eggs = <span class="string">&#x27;spam&#x27;</span>  <span class="comment"># 修改全局变量</span></span><br><span class="line"></span><br><span class="line">spam()</span><br><span class="line"><span class="built_in">print</span>(eggs)  </span><br><span class="line"><span class="comment"># 代码输出为：spam</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>解释</strong>：用<code>global语句</code>来告诉python我们要在此函数内修改的<code>eggs</code>是一个全局变量，不要用这个名字创建一个局部变量。因为<code>eggs</code>在<code>spam()</code>函数的顶部被声明为<code>global</code>所以当<code>eggs</code>被赋值为<code>spam</code>时赋值发生在全局作用域的<code>eggs上</code>没有创建局部<code>eggs</code>变量。</p></li><li><p><strong>法则（判断全局变量或局部变量）</strong>：</p><p>1.如果变量在全局作用域中使用（在所有函数之外），它就是全局变量。</p><p>2.如果在一个函数中有针对该变量的<code>global语句</code>，它就是全局变量。</p><p>3.如果该变量用于函数中的赋值语句，它就是局部变量。</p><p>4.如果该变量没有用在赋值语句中，它就是全局变量。</p></li></ul><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h2><ul><li><p><strong>语法</strong>：使用 <code>try</code> 和 <code>except</code> 捕获异常。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>(<span class="params">divideBy</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果运行以上代码会遇到异常，因为有一个除数为0，遇到这种情况可以使用<code>try</code>和<code>except</code>语句来进行异常处理处理。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>(<span class="params">divideBy</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error: Invalid argument.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">12</span>))        </span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">0</span>))  <span class="comment"># 输出：Error: Invalid argument. 后返回 None</span></span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>解释</strong>：我们使用<code>try</code>和<code>except</code>语句来检测代码中可能会报错的细节，但一旦跳到<code>except</code>子句的代码,就不会回到<code>try</code>的子句，而会继续向下执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习--控制流</title>
      <link href="/2025/03/22/Python%E5%AD%A6%E4%B9%A0--%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
      <url>/2025/03/22/Python%E5%AD%A6%E4%B9%A0--%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><blockquote><p>[!NOTE]</p><p>以下内容部分摘录自<code>《Python编程快速上手——让繁琐的工作自动化（第二版）》</code>，并加入了一些自己的理解，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-布尔值"><a href="#1-布尔值" class="headerlink" title="1.布尔值"></a>1.布尔值</h2><ul><li>首先我们引入一个布尔值的概念，它的数据类型只有两种：<code>True</code>和<code>False</code> </li><li>像其他值一样布尔值也用在表达式中，并且可以保存在变量中。z</li></ul><h2 id="2-比较操作符"><a href="#2-比较操作符" class="headerlink" title="2.比较操作符"></a>2.比较操作符</h2><p>以下是几种比较常见的python中的比较操作符：</p><table><thead><tr><th align="center">操作符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr></tbody></table><h2 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3.代码块"></a>3.代码块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your name:&#x27;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;please enter your password:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,CYX&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Access granted&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Wrong password&#x27;</span>)  </span><br><span class="line">       </span><br></pre></td></tr></table></figure><ul><li><p><strong>解释</strong>：首先我们用这串代码来引入代码块的概念</p><ul><li><p>代码块有三条规则：</p><p>1.缩进增加时，代码块开始。</p><p>2.代码块可以包含其他代码块。</p><p>3.缩进减少为0，或与外面包围代码块对齐代码块就结束了。</p></li></ul><p>如上述例子中，其中一个代码块开始于<code>print(&#39;Hello,CYX&#39;)</code>,并且包含之后的所有行</p></li></ul><h2 id="4-if-else-语句"><a href="#4-if-else-语句" class="headerlink" title="4. if...else 语句"></a>4. <code>if...else</code> 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if语句的组成</span></span><br><span class="line"><span class="comment"># 1.if关键字</span></span><br><span class="line"><span class="comment"># 2.条件（求值为True或False的表达式）</span></span><br><span class="line"><span class="comment"># 3.冒号（：）</span></span><br><span class="line"><span class="comment"># 4.在下一行开始，缩进的代码块（if的子句）</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your name:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello &#x27;</span> + name)</span><br><span class="line"><span class="comment"># else语句的组成</span></span><br><span class="line"><span class="comment"># 1.else关键字</span></span><br><span class="line"><span class="comment"># 2.冒号（：）</span></span><br><span class="line"><span class="comment"># 3.在下一行开始，缩进的代码块（else的子句）</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello stranger!&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>if...else</code> 语句用于条件判断。如果条件满足执行 <code>if</code> 语句块，否则执行 <code>else</code> 语句块。</li></ul><h2 id="5-elif-语句"><a href="#5-elif-语句" class="headerlink" title="5. elif 语句"></a>5. <code>elif</code> 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elif语句的使用，与C语言中的else if语句类似</span></span><br><span class="line"><span class="comment"># elif语句的组成：</span></span><br><span class="line"><span class="comment"># 1.elif关键字</span></span><br><span class="line"><span class="comment"># 2.条件（求值为True或False的表达式）</span></span><br><span class="line"><span class="comment"># 3.冒号（：）</span></span><br><span class="line"><span class="comment"># 4.在下一行开始，缩进的代码块（elif的子句）</span></span><br><span class="line">name = <span class="string">&#x27;KKK&#x27;</span></span><br><span class="line">age = <span class="number">3000</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi CYX&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">12</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you are not CYX, kiddo&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Unlike you, CYX is not an undead, immortal vampire&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you are not CYX, grannie&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>elif</code> 是 <code>else if</code> 的缩写，可以用于多个条件判断。程序依次检查每个条件，直到有条件满足。</li></ul><h2 id="6-while-循环"><a href="#6-while-循环" class="headerlink" title="6. while 循环"></a>6. <code>while</code> 循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while循环语句的组成</span></span><br><span class="line"><span class="comment"># 1.while关键字</span></span><br><span class="line"><span class="comment"># 2.条件（求值为True或False的表达式）</span></span><br><span class="line"><span class="comment"># 3.冒号</span></span><br><span class="line"><span class="comment"># 4.while的子句</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your name:&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> name != <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;WRONG!!&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your name, again:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;RIGHT!&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>while</code> 循环会不断执行，直到条件不再满足。在此例中，程序会不断要求用户输入正确的名字，直到输入 <code>&#39;CYX&#39;</code> 为止。</li></ul><h2 id="7-break-语句"><a href="#7-break-语句" class="headerlink" title="7. break 语句"></a>7. <code>break</code> 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break是一个捷径，可以让你提前跳出while的子句。遇到break语句就会马上退出while的子句</span></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;please enter your name:&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Thank you!&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>break</code> 语句可以让程序提前退出循环。在这个例子中，当输入为 <code>&#39;CYX&#39;</code> 时，<code>break</code> 会终止 <code>while</code> 循环。</li></ul><h2 id="8-continue-语句"><a href="#8-continue-语句" class="headerlink" title="8. continue 语句"></a>8. <code>continue</code> 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue语句用于循环内部。当程序执行遇到continue语句就会马上跳回到循环开始，重新对循环条件求值</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Who are you?&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&#x27;CYX&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, CYX. What is the password?&#x27;</span>)</span><br><span class="line">    password = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;access granted&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>continue</code> 语句会跳过当前循环的剩余部分，直接进行下一次循环。在此例中，只有输入 <code>&#39;CYX&#39;</code> 时，才会继续执行后续的代码。</li></ul><h2 id="9-for-循环与-range-函数"><a href="#9-for-循环与-range-函数" class="headerlink" title="9.for 循环与 range() 函数"></a>9.<code>for</code> 循环与 <code>range()</code> 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在条件为True时while循环会执行，如果想让代码块执行固定的次数，可以通过for循环和range()函数来实现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Jimmy Five Times (&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>for</code> 循环与 <code>range()</code> 函数结合使用，<code>range(5)</code> 生成从 0 到 4 的整数序列，用于循环固定次数。以下是一个<code>for</code>循环的例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>for</code> 循环用于迭代指定的范围。在此例中，计算从 0 到 100 所有整数的和。</li></ul><h2 id="10-range-函数"><a href="#10-range-函数" class="headerlink" title="10. range() 函数"></a>10. <code>range()</code> 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">16</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#第一个参数是for循环变量开始的值 第二个参数是上限但不包括他</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#range函数也可以有第三个值 分别是起始值 终止值 和 步长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#range函数也可以用负数作为步长让循环计数逐渐减少</span></span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>range()</code> 函数用于生成指定范围的数字序列，支持起始值、结束值和步长的设置。可以用来控制循环的起始值、终止值及步进。</li></ul><h2 id="11-导入模块"><a href="#11-导入模块" class="headerlink" title="11. 导入模块"></a>11. 导入模块</h2><ul><li><p>python可以调用一组基本的函数，成为内置函数（如 <code>print()</code>，<code>input()</code>，<code>len()</code>）。</p></li><li><p>python也包括一组模块，称为“标准库”每个模块都是一个python程序，包含一组相关的函数，可以嵌入你程序中,例如:<code>math</code>有与数学相关的函数,，<code>random</code>有与随机数相关的函数</p></li><li><p><code>import</code>用来导入这些函数，他的组成部分为：</p><p>1.<code>import</code>关键字 </p><p>2.模块的名称 </p><p>3.可选的更多模块的名称 至今用逗号隔开</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入random模块，并使用random.randint()生成随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>import</code> 用于导入外部模块，例如 <code>random</code> 模块。此示例中使用 <code>random.randint()</code> 生成一个范围在 1 到 10 之间的随机整数。</li></ul><p><code>form import</code> 包括<code>form</code>关键字<code>板块名称</code>和<code>import</code>关键字和一个星号<code>*</code>，这种形式的<code>import</code>语句调用如<code>random</code>模板中的函数时不需要<code>random. </code>前缀</p><h2 id="12-sys-exit-函数提前结束程序"><a href="#12-sys-exit-函数提前结束程序" class="headerlink" title="12. sys.exit() 函数提前结束程序"></a>12. <code>sys.exit()</code> 函数提前结束程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当程序执行到指令底部时总是会终止，但是调用sys.exit()函数可以让程序提前终止或退出</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Type exit to exit.&#x27;</span>)</span><br><span class="line">    response = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You typed &#x27;</span> + response + <span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>sys.exit()</code> 用于终止程序的执行。当用户输入 <code>&#39;exit&#39;</code> 时，程序会提前退出。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习--基础</title>
      <link href="/2025/03/21/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/21/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><blockquote><p>[!NOTE]</p><p>以下内容部分摘录自<code>《Python编程快速上手——让繁琐的工作自动化（第二版）》</code>，并加入了一些自己的理解，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h2 id="1-第一个Python程序"><a href="#1-第一个Python程序" class="headerlink" title="1. 第一个Python程序"></a>1. 第一个Python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个程序打印问候并询问我的名字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;What is your name?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myName = <span class="built_in">input</span>(<span class="string">&#x27;Your name is:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;It is good to meet you,&#x27;</span> + myName)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The length of your name is:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(myName))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;What is your age?&#x27;</span>)</span><br><span class="line">myAge = <span class="built_in">input</span>(<span class="string">&#x27;Your age is:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you will be &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(myAge) + <span class="number">1</span>) + <span class="string">&#x27; in a year&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：这是一个简单的程序，打印问候语，询问用户的名字，并计算名字的长度。还询问用户的年龄，并预测他们明年的年龄。</li></ul><h2 id="2-整数和浮点数的转换"><a href="#2-整数和浮点数的转换" class="headerlink" title="2. 整数和浮点数的转换"></a>2. 整数和浮点数的转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(-<span class="number">3.14</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;42&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;-99&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(-<span class="number">99</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;3.14&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">3.14</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;10&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：这段代码展示了不同类型之间的转换：<ul><li><code>str()</code>：将数字转换为字符串。</li><li><code>int()</code>：将字符串和数字转换为整数。</li><li><code>float()</code>：将字符串和数字转换为浮动点数。</li><li>注意：<code>int(1.25)</code>是有效的，但<code>int(&#39;1.25&#39;)</code>会报错，因为它要求字符串为整数。</li></ul></li></ul><h2 id="3-获取字符串的长度"><a href="#3-获取字符串的长度" class="headerlink" title="3. 获取字符串的长度"></a>3. 获取字符串的长度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;aaa&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>len()</code>函数返回字符串的长度。在这个例子中，字符串<code>&#39;aaa&#39;</code>有3个字符。</li></ul><h2 id="4-四舍五入函数-round"><a href="#4-四舍五入函数-round" class="headerlink" title="4. 四舍五入函数 round()"></a>4. 四舍五入函数 <code>round()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">1.4</span>), <span class="built_in">round</span>(<span class="number">1.6</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">1.23456</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.5</span>), <span class="built_in">round</span>(<span class="number">3.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(-<span class="number">1.2</span>), <span class="built_in">round</span>(-<span class="number">3.8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<code>round()</code>函数用于四舍五入数字到最接近的整数或指定的小数位数。 <ul><li><strong>银行家舍入法</strong>：当数字后面是<code>.5</code>时，Python会将其舍入到最接近的偶数（例如，<code>round(2.5)</code> → <code>2</code>，<code>round(3.5)</code> → <code>4</code>）。</li><li><strong>处理浮点数精度问题</strong>：<code>round(0.1 + 0.2, 1)</code>可以修正浮点数计算中的误差，得到更精确的结果。</li></ul></li></ul><h2 id="5-使用-str-进行字符串拼接"><a href="#5-使用-str-进行字符串拼接" class="headerlink" title="5. 使用 str() 进行字符串拼接"></a>5. 使用 <code>str()</code> 进行字符串拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am &#x27;</span> + <span class="built_in">str</span>(<span class="number">29</span>) + <span class="string">&#x27; years old&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：在Python中，不能直接将字符串与整数进行拼接。要将整数与字符串拼接，需要使用<code>str()</code>函数将整数转换为字符串。</li></ul><h2 id="其他注意事项："><a href="#其他注意事项：" class="headerlink" title="其他注意事项："></a>其他注意事项：</h2><ul><li><strong>第一个Python程序</strong>：可以使用<code>input()</code>来获取用户输入。然而，需要将输入转换为正确的类型（例如，对于数字输入使用<code>int()</code>）。</li><li><strong>类型转换</strong>：Python提供了一些函数，如<code>str()</code>、<code>int()</code>和<code>float()</code>，用于在整数、浮动点数和字符串之间进行类型转换。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MosHSasA</title>
      <link href="/2025/03/19/%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/03/19/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 文章双侧栏bug修复 *//* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/*导航栏魔改*//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -38px;}/*黑夜霓虹灯CSS部分*//* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(255, 215, 0) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(255, 215, 0) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {  transition: text-shadow 1s linear !important;}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(255, 215, 0);  --backdrop-filter: blur(5px) saturate(150%);}/*页面样式调节*//* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {now.setTime(now.getTime() + 1e3);var e = new Date("03/20/2025 00:00:00"),t = Math.trunc(234e8 + (now - e) / 1e3 * 17),a = (t / 1496e5).toFixed(6),o = new Date("03/20/2025 00:00:00"),n = (now - o) / 1e3 / 60 / 60 / 24,r = Math.floor(n),i = (now - o) / 1e3 / 60 / 60 - 24 * r,s = Math.floor(i);1 == String(s).length && (s = "0" + s);var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s,l = Math.floor(d);1 == String(l).length && (l = "0" + l);var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l,b = Math.round(g);1 == String(b).length && (b = "0" + b);let c = "";c = s < 18 && s >= 9 ? `<div style="font-size:13px;font-weight:bold">本站已经运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<div style="font-size:13px;font-weight:bold">本站已经运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c)}setInterval((() => {createtime()}), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;var n, e, i, h, t = .05,s = document.getElementById("universe"),o = !0,a = "180,184,240",r = "226,225,142",d = "226,225,224",c = [];function f() {n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e)}function u() {h.clearRect(0, 0, n, e);for (var t = c.length, i = 0; i < t; i++) {var s = c[i];s.move(), s.fadeIn(), s.fadeOut(), s.draw()}}function y() {this.reset = function() {this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)}, this.fadeIn = function() {this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)}, this.fadeOut = function() {this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))}, this.draw = function() {if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);else if (this.comet) {h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);for (var t = 0; t < 30; t++) h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()} else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r);h.closePath(), h.fill()}, this.move = function() {this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)}, setTimeout(function() {o = !1}, 50)}function m(t) {return Math.floor(1e3 * Math.random()) + 1 < 10 * t}function l(t, i) {return Math.random() * (i - t) + t}f(), window.addEventListener("resize", f, !1),function() {h = s.getContext("2d");for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();u()}(),function t() {document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
